diff --git a/.changeset/README.md b/.changeset/README.md
deleted file mode 100644
index e5b6d8d..0000000
--- a/.changeset/README.md
+++ /dev/null
@@ -1,8 +0,0 @@
-# Changesets
-
-Hello and welcome! This folder has been automatically generated by `@changesets/cli`, a build tool that works
-with multi-package repos, or single-package repos to help you version and publish your code. You can
-find the full documentation for it [in our repository](https://github.com/changesets/changesets)
-
-We have a quick list of common questions to get you started engaging with this project in
-[our documentation](https://github.com/changesets/changesets/blob/main/docs/common-questions.md)
diff --git a/.changeset/config.json b/.changeset/config.json
index 5854860..2be13d4 100644
--- a/.changeset/config.json
+++ b/.changeset/config.json
@@ -1,11 +1,11 @@
 {
-  "$schema": "https://unpkg.com/@changesets/config@2.3.0/schema.json",
+  "$schema": "https://unpkg.com/@changesets/config@3.1.1/schema.json",
   "changelog": "@changesets/cli/changelog",
   "commit": false,
+  "fixed": [],
   "linked": [],
   "access": "public",
   "baseBranch": "main",
   "updateInternalDependencies": "patch",
-  "ignore": [],
-  "commitMessage": "chore(release): version packages"
+  "ignore": []
 }
diff --git a/.changeset/status.json b/.changeset/status.json
deleted file mode 100644
index 4a6080a..0000000
--- a/.changeset/status.json
+++ /dev/null
@@ -1,25 +0,0 @@
-{
-  "changesets": [
-    {
-      "releases": [
-        {
-          "name": "@alienfishconsulting/core-context",
-          "type": "patch"
-        }
-      ],
-      "summary": "Updated the README.md file",
-      "id": "cuddly-yaks-worry"
-    }
-  ],
-  "releases": [
-    {
-      "name": "@alienfishconsulting/core-context",
-      "type": "patch",
-      "oldVersion": "1.0.2",
-      "changesets": [
-        "cuddly-yaks-worry"
-      ],
-      "newVersion": "1.0.3"
-    }
-  ]
-}
\ No newline at end of file
diff --git a/.github/bak/build.yml b/.github/bak/build.yml
deleted file mode 100644
index f6360bf..0000000
--- a/.github/bak/build.yml
+++ /dev/null
@@ -1,159 +0,0 @@
-name: Build
-
-on:
-  workflow_call:
-    inputs:
-      base-ref:
-        required: true
-        type: string
-        description: 'Base reference for determining affected packages'
-      runAll:
-        required: false
-        type: boolean
-        default: false
-        description: 'Whether to build all packages or just affected'
-      auto-fix-lockfile:
-        required: false
-        type: boolean
-        default: false
-        description: 'Automatically update lockfile if out of date'
-    secrets:
-      NX_CLOUD_ACCESS_TOKEN:
-        required: true
-        description: 'Nx Cloud access token for distributed task execution'
-  workflow_dispatch:
-    inputs:
-      base-ref:
-        description: 'Base reference for determining affected packages'
-        required: true
-        default: 'main'
-        type: string
-      runAll:
-        description: 'Build all packages instead of just affected'
-        required: false
-        default: false
-        type: boolean
-      auto-fix-lockfile:
-        description: 'Automatically update lockfile if out of date'
-        required: false
-        default: false
-        type: boolean
-
-jobs:
-  build:
-    name: 🛠️ Build
-    runs-on: ubuntu-latest
-    env:
-      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
-    steps:
-      - uses: actions/checkout@v4
-        with:
-          fetch-depth: 0
-          fetch-tags: true
-
-      - name: 🔍 Validate repository state
-        run: |
-          echo "🔄 Current branch: $(git branch --show-current)"
-          echo "🔄 Base reference: ${{ inputs.base-ref }}"
-          echo "🔄 Build mode: ${{ inputs.runAll == true && 'ALL PACKAGES' || 'AFFECTED PACKAGES' }}"
-
-      - uses: pnpm/action-setup@v2
-        name: 🧰 Setup pnpm
-        with:
-          version: 10.6.4
-
-      - uses: actions/setup-node@v4
-        name: 🧰 Setup Node.js
-        with:
-          node-version: 18
-          cache: 'pnpm'
-
-      - name: ♻️ Restore pnpm cache
-        uses: actions/cache@v4
-        with:
-          path: ~/.pnpm-store
-          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
-          restore-keys: |
-            ${{ runner.os }}-pnpm-store-
-
-      - name: 📦 Check package.json files
-        id: check-packages
-        run: |
-          # List any package.json files that have changed
-          echo "Changed package files:"
-          git diff --name-only ${{ inputs.base-ref }} HEAD | grep package.json || echo "No package.json files changed"
-          
-          # Specifically check the problematic package
-          if [ -f "tools/alienfish-core/package.json" ]; then
-            echo "Found tools/alienfish-core/package.json"
-            echo "Dependencies:"
-            cat tools/alienfish-core/package.json | grep -A 20 dependencies || true
-          else
-            echo "tools/alienfish-core/package.json not found"
-          fi
-
-      - name: 📋 Validate lockfile status
-        id: validate-lockfile
-        run: |
-          # Check if lockfile matches package.json files
-          if pnpm install --frozen-lockfile --prefer-offline > /dev/null 2>&1; then
-            echo "Lockfile is up to date"
-            echo "lockfile_valid=true" >> $GITHUB_OUTPUT
-          else
-            echo "⚠️ Lockfile is out of date"
-            echo "lockfile_valid=false" >> $GITHUB_OUTPUT
-          fi
-
-      - name: 🔄 Install dependencies (frozen lockfile)
-        if: steps.validate-lockfile.outputs.lockfile_valid == 'true'
-        run: pnpm install --frozen-lockfile
-
-      - name: 🔄 Update lockfile and install dependencies
-        if: steps.validate-lockfile.outputs.lockfile_valid == 'false' && inputs.auto-fix-lockfile == true
-        run: |
-          echo "🔄 Updating lockfile and installing dependencies..."
-          pnpm install --no-frozen-lockfile
-          
-          # Output the changes to the lockfile for debugging
-          echo "📝 Changes to lockfile:"
-          git diff pnpm-lock.yaml | grep -E '^\+|\-' | head -20
-          
-          echo "✅ Dependencies installed with updated lockfile"
-
-      - name: ❌ Lockfile mismatch error
-        if: steps.validate-lockfile.outputs.lockfile_valid == 'false' && inputs.auto-fix-lockfile != true
-        run: |
-          echo "::error::Lockfile is out of date with package.json files"
-          echo "Try one of the following solutions:"
-          echo "1. Run 'pnpm install' locally and commit the updated lockfile"
-          echo "2. Run this workflow with 'auto-fix-lockfile' set to true"
-          echo "3. Use '--no-frozen-lockfile' in your CI script (less recommended)"
-          
-          # Specific error for the alienfish-core package
-          if [ -f "tools/alienfish-core/package.json" ]; then
-            echo "::error::Specifically check tools/alienfish-core/package.json dependencies"
-          fi
-          
-          exit 1
-
-      # Run builds based on runAll flag
-      - name: 🏗️ Build all packages
-        if: inputs.runAll == true
-        run: |
-          echo "🏗️ Building all packages..."
-          pnpm nx run-many -t build --all
-          echo "✅ All packages built successfully"
-
-      - name: 🏗️ Build affected packages
-        if: inputs.runAll != true
-        run: |
-          echo "🏗️ Building affected packages since ${{ inputs.base-ref }}..."
-          AFFECTED_COUNT=$(pnpm nx show projects --affected --base="${{ inputs.base-ref }}" --head=HEAD | wc -l)
-          echo "Found $AFFECTED_COUNT affected projects"
-          
-          if [ "$AFFECTED_COUNT" -eq "0" ]; then
-            echo "No affected projects found, skipping build"
-          else
-            pnpm nx affected -t build --base="${{ inputs.base-ref }}" --head=HEAD
-            echo "✅ Affected packages built successfully"
-          fi
\ No newline at end of file
diff --git a/.github/bak/ci.yml b/.github/bak/ci.yml
deleted file mode 100644
index 4dcd870..0000000
--- a/.github/bak/ci.yml
+++ /dev/null
@@ -1,294 +0,0 @@
-name: 🚀 CI Pipeline
-
-on:
-  pull_request:
-    branches: ['**']
-    types: [opened, synchronize, reopened, closed]
-  workflow_dispatch:
-    inputs:
-      base-ref:
-        description: 'The base ref to compare against'
-        required: true
-        default: ${{ github.base_ref }}
-        type: string
-      runAll:
-        description: 'Run all tests'
-        required: false
-        default: true
-        type: boolean
-      auto-fix-lockfile:
-        description: 'Automatically update lockfile if out of date'
-        required: false
-        default: false
-        type: boolean
-
-permissions:
-  contents: write
-  pull-requests: write
-  packages: write
-  checks: write  # Added for PR status checks
-
-jobs:
-  # Initial validation and context determination
-  prepare:
-    name: 🛠️ Prepare Pipeline
-    runs-on: ubuntu-latest
-    outputs:
-      base-ref: ${{ steps.set-context.outputs.base-ref }}
-      run-all: ${{ steps.set-context.outputs.run-all }}
-      auto-fix-lockfile: ${{ steps.set-context.outputs.auto-fix-lockfile }}
-      is-pr-closed: ${{ steps.set-context.outputs.is-pr-closed }}
-      pr-number: ${{ steps.set-context.outputs.pr-number }}
-    steps:
-      - name: Validate and normalize ref
-        id: validate-ref
-        run: |
-          # Determine the ref to validate
-          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
-            REF_TO_CHECK="${{ github.base_ref }}"
-          else
-            REF_TO_CHECK="${{ github.event.inputs.base-ref }}"
-          fi
-            
-          # Default to main if empty
-          if [ -z "$REF_TO_CHECK" ]; then
-            echo "⚠️ No ref provided, defaulting to main"
-            REF_TO_CHECK="main"
-          fi
-            
-          echo "Validating ref: ${REF_TO_CHECK}"
-            
-          # Fetch all refs
-          git fetch --all --tags
-            
-          # Normalize ref
-          NORMALIZED_REF=${REF_TO_CHECK#refs/heads/}
-          NORMALIZED_REF=${NORMALIZED_REF#refs/tags/}
-            
-          # Validate ref
-          if git show-ref --verify --quiet "refs/heads/${NORMALIZED_REF}"; then
-            echo "✅ Valid branch: ${NORMALIZED_REF}"
-            echo "is_valid=true" >> $GITHUB_OUTPUT
-            echo "ref_type=branch" >> $GITHUB_OUTPUT
-            echo "normalized_ref=${NORMALIZED_REF}" >> $GITHUB_OUTPUT
-          elif git show-ref --verify --quiet "refs/tags/${NORMALIZED_REF}"; then
-            echo "✅ Valid tag: ${NORMALIZED_REF}"
-            echo "is_valid=true" >> $GITHUB_OUTPUT
-            echo "ref_type=tag" >> $GITHUB_OUTPUT
-            echo "normalized_ref=${NORMALIZED_REF}" >> $GITHUB_OUTPUT
-          elif git cat-file -e "${NORMALIZED_REF}^{commit}" 2>/dev/null; then
-            COMMIT_SHA=$(git rev-parse "${NORMALIZED_REF}")
-            echo "✅ Valid commit: ${COMMIT_SHA}"
-            echo "is_valid=true" >> $GITHUB_OUTPUT
-            echo "ref_type=commit" >> $GITHUB_OUTPUT
-            echo "normalized_ref=${COMMIT_SHA}" >> $GITHUB_OUTPUT
-          else
-            echo "⚠️ Invalid ref: ${NORMALIZED_REF}, defaulting to main"
-            echo "is_valid=false" >> $GITHUB_OUTPUT
-            echo "ref_type=unknown" >> $GITHUB_OUTPUT
-            echo "normalized_ref=main" >> $GITHUB_OUTPUT  # Fallback to main
-          fi
-
-      - name: 🔍 Determine context
-        id: set-context
-        run: |
-          # Determine base reference
-          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
-            echo "base-ref=${{ github.base_ref }}" >> $GITHUB_OUTPUT
-            echo "is-pr-closed=${{ github.event.action == 'closed' }}" >> $GITHUB_OUTPUT
-            echo "pr-number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
-          else
-            echo "base-ref=${{ github.event.inputs.base-ref }}" >> $GITHUB_OUTPUT
-            echo "is-pr-closed=false" >> $GITHUB_OUTPUT
-            echo "pr-number=0" >> $GITHUB_OUTPUT
-          fi
-          
-          # Determine run all flag
-          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" != "closed" ]]; then
-            echo "run-all=true" >> $GITHUB_OUTPUT
-          else
-            echo "run-all=${{ github.event.inputs.runAll }}" >> $GITHUB_OUTPUT
-          fi
-          
-          # Determine auto-fix-lockfile flag
-          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.auto-fix-lockfile }}" == "true" ]]; then
-            echo "auto-fix-lockfile=true" >> $GITHUB_OUTPUT
-          else
-            echo "auto-fix-lockfile=false" >> $GITHUB_OUTPUT
-          fi
-
-      - name: 📊 Display pipeline configuration
-        run: |
-          echo "🔄 Event type: ${{ github.event_name }}"
-          echo "🔄 Event action: ${{ github.event.action }}"
-          echo "🔄 Base ref: ${{ steps.set-context.outputs.base-ref }}"
-          echo "🔄 Run all: ${{ steps.set-context.outputs.run-all }}"
-          echo "🔄 Auto-fix lockfile: ${{ steps.set-context.outputs.auto-fix-lockfile }}"
-          echo "🔄 Is PR closed: ${{ steps.set-context.outputs.is-pr-closed }}"
-          echo "🔄 PR number: ${{ steps.set-context.outputs.pr-number }}"
-
-
-  # Handle PR closed without merging
-  cleanup-closed-pr:
-    name: 🧹 Cleanup Closed PR
-    needs: [prepare]
-    if: needs.prepare.outputs.is-pr-closed == 'true' && github.event.pull_request.merged == false
-    runs-on: ubuntu-latest
-    steps:
-      - uses: actions/checkout@v4
-        with:
-          fetch-depth: 0
-          ref: ${{ github.base_ref }}
-
-      - name: 📝 Log PR closure details
-        run: |
-          echo "PR #${{ github.event.pull_request.number }} was closed without merging"
-          echo "PR title: ${{ github.event.pull_request.title }}"
-          echo "PR head branch: ${{ github.event.pull_request.head.ref }}"
-          echo "PR base branch: ${{ github.event.pull_request.base.ref }}"
-
-      - name: 🧹 Clean up resources
-        run: |
-          echo "Cleaning up resources created for PR #${{ github.event.pull_request.number }}..."
-          
-          # Remove build artifacts
-          gh api -X GET /repos/${{ github.repository }}/actions/artifacts \
-            | jq '.artifacts[] | select(.name | contains("pr-${{ github.event.pull_request.number }}-"))' \
-            | jq -r '.id' \
-            | xargs -I{} gh api -X DELETE /repos/${{ github.repository }}/actions/artifacts/{}
-          
-          # Remove temporary directories or files if any
-          # This is a placeholder - customize for your specific resources
-          
-          # Clean up any feature flags or configurations
-          echo "All resources for PR #${{ github.event.pull_request.number }} have been cleaned up"
-        env:
-          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
-
-      - name: 📣 Notify about closed PR
-        run: |
-          echo "::notice::PR #${{ github.event.pull_request.number }} closed without merging. Resources have been cleaned up."
-
-
-  # Run lint on PR opened/synchronized
-  lint:
-    name: 🧹 Lint Code
-    needs: [prepare]
-    if: needs.prepare.outputs.is-pr-closed != 'true'
-    uses: ./.github/workflows/lint.yml
-    with:
-      base-ref: ${{ needs.prepare.outputs.base-ref }}
-      runAll: ${{ needs.prepare.outputs.run-all }}
-      auto-fix-lockfile: ${{ needs.prepare.outputs.auto-fix-lockfile }}
-    secrets:
-      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
-
-  # Run test on PR opened/synchronized
-  test:
-    name: 🧪 Run Tests
-    needs: [prepare]
-    if: needs.prepare.outputs.is-pr-closed != 'true'
-    uses: ./.github/workflows/test.yml
-    with:
-      base-ref: ${{ needs.prepare.outputs.base-ref }}
-      runAll: ${{ needs.prepare.outputs.run-all }}
-      auto-fix-lockfile: ${{ needs.prepare.outputs.auto-fix-lockfile }}
-    secrets:
-      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
-
-  # Run build on PR opened/synchronized
-  build:
-    name: 🏗️ Build Project
-    needs: [prepare]
-    if: needs.prepare.outputs.is-pr-closed != 'true'
-    uses: ./.github/workflows/build.yml
-    with:
-      base-ref: ${{ needs.prepare.outputs.base-ref }}
-      runAll: ${{ needs.prepare.outputs.run-all }}
-      auto-fix-lockfile: ${{ needs.prepare.outputs.auto-fix-lockfile }}
-    secrets:
-      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
-
-  # Final validation step
-  validate:
-    name: ✅ Validation Summary
-    needs: [prepare, lint, test, build]
-    if: always() && needs.prepare.outputs.is-pr-closed != 'true'
-    runs-on: ubuntu-latest
-    steps:
-      - name: 🔍 Check job status
-        id: status
-        run: |
-          if [[ "${{ needs.lint.result }}" == "success" && \
-                "${{ needs.test.result }}" == "success" && \
-                "${{ needs.build.result }}" == "success" ]]; then
-            echo "status=success" >> $GITHUB_OUTPUT
-          else
-            echo "status=failure" >> $GITHUB_OUTPUT
-          fi
-
-      - name: ✅ Validation successful
-        if: steps.status.outputs.status == 'success'
-        run: |
-          echo "================================================================"
-          echo "                 🎉 All validation jobs passed! 🎉               "
-          echo "================================================================"
-          echo "✅ Linting completed successfully"
-          echo "✅ All tests passed"
-          echo "✅ Build process completed without errors"
-          echo "----------------------------------------------------------------"
-          echo "Ready to merge! 👍"
-
-      - name: ❌ Validation failed
-        if: steps.status.outputs.status == 'failure'
-        run: |
-          echo "================================================================"
-          echo "              ⚠️ Some validation jobs failed! ⚠️               "
-          echo "================================================================"
-          echo "Lint: ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }}"
-          echo "Test: ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }}"
-          echo "Build: ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }}"
-          echo "----------------------------------------------------------------"
-          echo "Please check the job logs for more details on failures."
-          exit 1
-
-      # Update PR with status check and label
-      - name: 🏷️ Update PR status
-        if: github.event_name == 'pull_request' && needs.prepare.outputs.pr-number != '0'
-        run: |
-          # Create or update status check
-          if [[ "${{ steps.status.outputs.status }}" == "success" ]]; then
-            # Mark PR as ready to merge
-            gh api \
-              --method POST \
-              -H "Accept: application/vnd.github+json" \
-              /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
-              -f state="success" \
-              -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
-              -f description="All checks have passed! PR is ready to merge." \
-              -f context="CI Validation"
-          
-            # Add ready-to-merge label
-            gh pr edit ${{ needs.prepare.outputs.pr-number }} --add-label "ready-to-merge"
-          
-            # Optional: Add approval comment
-            gh pr comment ${{ needs.prepare.outputs.pr-number }} --body "## ✅ CI Validation Complete\nAll tests, builds, and lint checks have passed. This PR is ready to merge!"
-          else
-            # Mark PR as having failed checks
-            gh api \
-              --method POST \
-              -H "Accept: application/vnd.github+json" \
-              /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
-              -f state="failure" \
-              -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
-              -f description="Some checks have failed. Please fix the issues before merging." \
-              -f context="CI Validation"
-          
-            # Remove ready-to-merge label if it exists
-            gh pr edit ${{ needs.prepare.outputs.pr-number }} --remove-label "ready-to-merge"
-          
-            # Optional: Add failure comment
-            gh pr comment ${{ needs.prepare.outputs.pr-number }} --body "## ❌ CI Validation Failed\nSome checks have failed. Please check the workflow logs for details."
-          fi
-        env:
-          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
\ No newline at end of file
diff --git a/.github/bak/codecov.yml b/.github/bak/codecov.yml
deleted file mode 100644
index d87e5fc..0000000
--- a/.github/bak/codecov.yml
+++ /dev/null
@@ -1,246 +0,0 @@
-name: CodeCov Upload
-env:
-  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
-
-on:
-  pull_request:
-    types: [ closed ]
-    branches:
-      - main
-  workflow_dispatch:
-  workflow_call:
-    secrets:
-      CODECOV_TOKEN:
-        required: true
-        description: 'Token for uploading coverage to Codecov'
-      NX_CLOUD_ACCESS_TOKEN:
-        required: true
-        description: 'Nx Cloud access token for distributed task execution'
-
-jobs:
-  test:
-    name: 🧪 Run Tests
-    uses: ./.github/workflows/test.yml
-    with:
-      base-ref: ${{ github.base_ref }}
-      runAll: true
-      auto-fix-lockfile: false
-    secrets:
-      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
-
-  upload-coverage:
-    name: 📊 Upload Coverage Reports
-    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
-    needs: [test]
-    runs-on: ubuntu-latest
-    env:
-      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
-    steps:
-      # Ensure we're on the main branch
-      - uses: actions/checkout@v4
-        with:
-          fetch-depth: 0
-          fetch-tags: true
-
-      - name: 🔍 Verify main branch
-        run: |
-          CURRENT_BRANCH=$(git branch --show-current)
-          if [ "$CURRENT_BRANCH" != "main" ]; then
-            echo "::error::This workflow must run on the main branch. Current branch: $CURRENT_BRANCH"
-            exit 1
-          fi
-          echo "✅ Running on main branch"
-
-      # Download coverage artifacts from test workflow
-      - name: 📥 Download coverage artifacts
-        id: download-artifacts
-        uses: actions/download-artifact@v4
-        with:
-          name: coverage-reports
-          path: coverage-reports
-
-      # Verify artifacts were downloaded and check their age
-      - name: 🧪 Verify artifacts integrity
-        id: verify-artifacts
-        run: |
-          # Check if artifacts exist
-          if [ ! -d "coverage-reports" ] || [ -z "$(ls -A coverage-reports 2>/dev/null)" ]; then
-            echo "::error::No coverage artifacts found or directory is empty"
-            exit 1
-          fi
-          
-          # Count artifacts for reporting
-          ARTIFACT_COUNT=$(find coverage-reports -type f -name "lcov.info" | wc -l)
-          if [ "$ARTIFACT_COUNT" -eq 0 ]; then
-            echo "::error::No lcov.info files found in artifacts"
-            exit 1
-          fi
-          
-          # Check artifact age (based on file timestamps)
-          ARTIFACT_TIME=$(find coverage-reports -type f -name "lcov.info" -exec stat -c %Y {} \; | sort -n | tail -1)
-          CURRENT_TIME=$(date +%s)
-          HOURS_OLD=$(( (CURRENT_TIME - ARTIFACT_TIME) / 3600 ))
-          
-          echo "Artifacts are approximately $HOURS_OLD hours old"
-          
-          if [ $HOURS_OLD -gt 24 ]; then
-            echo "::warning::Coverage artifacts are more than 24 hours old ($HOURS_OLD hours)"
-          else
-            echo "✅ Artifacts are recent ($HOURS_OLD hours old)"
-          fi
-          
-          echo "Found $ARTIFACT_COUNT lcov.info files in the artifacts"
-          echo "artifact_count=$ARTIFACT_COUNT" >> $GITHUB_OUTPUT
-          echo "artifact_age=$HOURS_OLD" >> $GITHUB_OUTPUT
-          echo "✅ Artifacts verified"
-
-      # Create directory structure for processing
-      - name: 🏗️ Restore coverage file structure
-        id: setup-directories
-        run: |
-          mkdir -p combined-coverage
-          
-          # Count files before restoration for validation
-          BEFORE_COUNT=$(find coverage-reports -type f -name "lcov.info" | wc -l)
-          
-          # Restore the original directory structure by moving files back to their source locations
-          RESTORED_COUNT=0
-          find coverage-reports -type f -name "lcov.info" | while read -r file; do
-            relative_path=${file#coverage-reports/}
-            # Create the directory if it doesn't exist
-            mkdir -p $(dirname "${relative_path}")
-            # Move the file
-            mv "$file" "${relative_path}"
-            echo "Restored: ${relative_path}"
-            RESTORED_COUNT=$((RESTORED_COUNT + 1))
-          done
-          
-          # Verify all files were moved correctly
-          if [ $RESTORED_COUNT -ne $BEFORE_COUNT ]; then
-            echo "::warning::Expected to restore $BEFORE_COUNT files, but only restored $RESTORED_COUNT"
-          else
-            echo "✅ Successfully restored $RESTORED_COUNT coverage files"
-          fi
-          
-          echo "restored_count=$RESTORED_COUNT" >> $GITHUB_OUTPUT
-
-      # Upload individual package coverage
-      - name: 📤 Upload per-package coverage reports
-        id: upload-package-coverage
-        continue-on-error: true  # Don't fail the whole workflow if one package fails
-        run: |
-          # Download codecov uploader with retry logic
-          MAX_RETRIES=3
-          RETRY_COUNT=0
-          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
-            curl -Os https://uploader.codecov.io/latest/linux/codecov && break
-            RETRY_COUNT=$((RETRY_COUNT + 1))
-            echo "Failed to download Codecov uploader, retrying ($RETRY_COUNT/$MAX_RETRIES)..."
-            sleep 5
-          done
-          
-          if [ ! -f "codecov" ]; then
-            echo "::error::Failed to download Codecov uploader after $MAX_RETRIES attempts"
-            exit 1
-          fi
-          
-          chmod +x codecov
-
-          TOTAL_PACKAGES=0
-          SUCCESSFUL_UPLOADS=0
-          FAILED_UPLOADS=0
-          
-          for file in $(find ./packages -type f -name 'lcov.info' -path '*/coverage/lcov.info'); do
-            TOTAL_PACKAGES=$((TOTAL_PACKAGES + 1))
-            pkg=$(echo $file | sed -E 's|.*/packages/([^/]+)/coverage/lcov.info|\1|')
-            echo "📦 Uploading coverage for $pkg"
-          
-            # Try up to 2 times per package
-            for attempt in {1..2}; do
-              ./codecov --file "$file" --flag "$pkg" --name "$pkg" --token "${{ secrets.CODECOV_TOKEN }}"
-          
-              if [ $? -eq 0 ]; then
-                echo "✅ Successfully uploaded coverage for $pkg"
-                SUCCESSFUL_UPLOADS=$((SUCCESSFUL_UPLOADS + 1))
-                break
-              else
-                echo "⚠️ Attempt $attempt failed for $pkg"
-                if [ $attempt -lt 2 ]; then
-                  echo "Retrying..."
-                  sleep 3
-                else
-                  echo "::warning::Failed to upload coverage for package $pkg after 2 attempts"
-                  FAILED_UPLOADS=$((FAILED_UPLOADS + 1))
-                fi
-              fi
-            done
-          done
-          
-          echo "📊 Upload Summary: $SUCCESSFUL_UPLOADS successful, $FAILED_UPLOADS failed out of $TOTAL_PACKAGES packages"
-          
-          # Set output variables
-          echo "total_packages=$TOTAL_PACKAGES" >> $GITHUB_OUTPUT
-          echo "successful_uploads=$SUCCESSFUL_UPLOADS" >> $GITHUB_OUTPUT
-          echo "failed_uploads=$FAILED_UPLOADS" >> $GITHUB_OUTPUT
-          
-          # Determine overall success - if we uploaded at least one package successfully
-          if [ $SUCCESSFUL_UPLOADS -eq 0 ] && [ $TOTAL_PACKAGES -gt 0 ]; then
-            echo "::error::All package uploads failed"
-            exit 1
-          fi
-
-      # Merge and upload combined coverage
-      - name: 🔄 Merge coverage reports
-        id: merge-coverage
-        run: |
-          mkdir -p combined-coverage
-          
-          # Count files being merged for validation
-          LCOV_COUNT=$(find ./packages -type f -name 'lcov.info' -path '*/coverage/lcov.info' | wc -l)
-          echo "Found $LCOV_COUNT lcov.info files to merge"
-          
-          if [ $LCOV_COUNT -eq 0 ]; then
-            echo "::error::No lcov.info files found to merge"
-            exit 1
-          fi
-          
-          # Merge the files with better error handling
-          find ./packages -type f -name 'lcov.info' -path '*/coverage/lcov.info' -exec cat {} + > ./combined-coverage/lcov.info
-          
-          # Check if merged file has content
-          MERGED_SIZE=$(wc -c < ./combined-coverage/lcov.info)
-          if [ ! -s ./combined-coverage/lcov.info ] || [ $MERGED_SIZE -eq 0 ]; then
-            echo "::error::Failed to merge coverage files or no coverage data found"
-            exit 1
-          fi
-          
-          echo "✅ Successfully merged $LCOV_COUNT coverage files ($(du -h ./combined-coverage/lcov.info | cut -f1) total)"
-          echo "lcov_count=$LCOV_COUNT" >> $GITHUB_OUTPUT
-          echo "merged_size=$MERGED_SIZE" >> $GITHUB_OUTPUT
-
-      - name: 📤 Upload combined coverage report
-        id: upload-combined-coverage
-        uses: codecov/codecov-action@v4
-        with:
-          token: ${{ secrets.CODECOV_TOKEN }}
-          files: ./combined-coverage/lcov.info
-          flags: total
-          name: total
-          fail_ci_if_error: true
-          verbose: true
-      - name: 🧹 Clean coverage files and artifacts
-        if: always() && (steps.upload-combined-coverage.outcome == 'success' || steps.upload-package-coverage.outputs.successful_uploads > 0)
-        run: |
-          echo "🧹 Cleaning up coverage directories..."
-          
-          # Count before cleanup for verification
-          COVERAGE_DIRS=$(find . -type d -name coverage | wc -l)
-          echo "Found $COVERAGE_DIRS coverage directories to clean"
-          
-          # Clean coverage directories
-          find . -type d -name coverage -exec rm -rf {} + 2>/dev/null || true
-          
-          echo "🧹 Cleaning up artifacts..."
-          rm -rf coverage-reports combined-coverage
-          
-          echo "✅ Cleanup completed successfully"
\ No newline at end of file
diff --git a/.github/bak/lint.yml b/.github/bak/lint.yml
deleted file mode 100644
index 943d95a..0000000
--- a/.github/bak/lint.yml
+++ /dev/null
@@ -1,161 +0,0 @@
-name: Lint
-
-on:
-  workflow_call:
-    inputs:
-      base-ref:
-        required: true
-        type: string
-        description: 'Base reference for determining affected packages'
-      runAll:
-        required: false
-        type: boolean
-        default: false
-        description: 'Whether to run linting on all packages or just affected'
-      auto-fix-lockfile:
-        required: false
-        type: boolean
-        default: false
-        description: 'Automatically update lockfile if out of date'
-    secrets:
-      NX_CLOUD_ACCESS_TOKEN:
-        required: true
-        description: 'Nx Cloud access token for distributed task execution'
-  workflow_dispatch:
-    inputs:
-      base-ref:
-        description: 'Base reference for determining affected packages'
-        required: true
-        default: 'main'
-        type: string
-      runAll:
-        description: 'Run linting on all packages instead of just affected'
-        required: false
-        default: false
-        type: boolean
-      auto-fix-lockfile:
-        description: 'Automatically update lockfile if out of date'
-        required: false
-        default: false
-        type: boolean
-
-jobs:
-  lint:
-    name: 🧹 Lint
-    runs-on: ubuntu-latest
-    env:
-      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
-    steps:
-      - uses: actions/checkout@v4
-        with:
-          fetch-depth: 0
-          fetch-tags: true
-
-      - name: 🔍 Validate repository state
-        run: |
-          echo "🔄 Current branch: $(git branch --show-current)"
-          echo "🔄 Base reference: ${{ inputs.base-ref }}"
-          echo "🔄 Lint mode: ${{ inputs.runAll == true && 'ALL PACKAGES' || 'AFFECTED PACKAGES' }}"
-          echo "🔄 Auto-fix lockfile: ${{ inputs.auto-fix-lockfile == true && 'YES' || 'NO' }}"
-
-      - uses: pnpm/action-setup@v2
-        name: 🧰 Setup pnpm
-        with:
-          version: 10.6.4
-
-      - uses: actions/setup-node@v4
-        name: 🧰 Setup Node.js
-        with:
-          node-version: 18
-          cache: 'pnpm'
-
-      - name: ♻️ Restore pnpm cache
-        uses: actions/cache@v4
-        with:
-          path: ~/.pnpm-store
-          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
-          restore-keys: |
-            ${{ runner.os }}-pnpm-store-
-
-      - name: 📦 Check package.json files
-        id: check-packages
-        run: |
-          # List any package.json files that have changed
-          echo "Changed package files:"
-          git diff --name-only ${{ inputs.base-ref }} HEAD | grep package.json || echo "No package.json files changed"
-          
-          # Check for problematic packages if any are known
-          if [ -f "tools/alienfish-core/package.json" ]; then
-            echo "Found tools/alienfish-core/package.json"
-            echo "Dependencies:"
-            cat tools/alienfish-core/package.json | grep -A 20 dependencies || true
-          fi
-
-      - name: 📋 Validate lockfile status
-        id: validate-lockfile
-        run: |
-          # Check if lockfile matches package.json files
-          if pnpm install --frozen-lockfile --prefer-offline > /dev/null 2>&1; then
-            echo "Lockfile is up to date"
-            echo "lockfile_valid=true" >> $GITHUB_OUTPUT
-          else
-            echo "⚠️ Lockfile is out of date"
-            echo "lockfile_valid=false" >> $GITHUB_OUTPUT
-          fi
-
-      - name: 🔄 Install dependencies (frozen lockfile)
-        if: steps.validate-lockfile.outputs.lockfile_valid == 'true'
-        run: pnpm install --frozen-lockfile
-
-      - name: 🔄 Update lockfile and install dependencies
-        if: steps.validate-lockfile.outputs.lockfile_valid == 'false' && inputs.auto-fix-lockfile == true
-        run: |
-          echo "🔄 Updating lockfile and installing dependencies..."
-          pnpm install --no-frozen-lockfile
-          
-          # Output the changes to the lockfile for debugging
-          echo "📝 Changes to lockfile:"
-          git diff pnpm-lock.yaml | grep -E '^\+|\-' | head -20
-          
-          echo "✅ Dependencies installed with updated lockfile"
-
-      - name: ❌ Lockfile mismatch error
-        if: steps.validate-lockfile.outputs.lockfile_valid == 'false' && inputs.auto-fix-lockfile != true
-        run: |
-          echo "::error::Lockfile is out of date with package.json files"
-          echo "Try one of the following solutions:"
-          echo "1. Run 'pnpm install' locally and commit the updated lockfile"
-          echo "2. Run this workflow with 'auto-fix-lockfile' set to true"
-          echo "3. Use '--no-frozen-lockfile' in your CI script (less recommended)"
-          
-          exit 1
-
-      # Check if there are any packages to lint
-      - name: 🔍 Check for packages to lint
-        id: check-lint
-        if: inputs.runAll != true && steps.validate-lockfile.outputs.lockfile_valid == 'true' || inputs.auto-fix-lockfile == true
-        run: |
-          echo "Checking for affected projects to lint..."
-          AFFECTED_COUNT=$(pnpm nx show projects --affected --base="${{ inputs.base-ref }}" --head=HEAD | wc -l)
-          echo "Found $AFFECTED_COUNT affected projects"
-          echo "affected_count=$AFFECTED_COUNT" >> $GITHUB_OUTPUT
-
-      # Run linting based on runAll flag
-      - name: 🧹 Run lint on all packages
-        if: inputs.runAll == true && (steps.validate-lockfile.outputs.lockfile_valid == 'true' || inputs.auto-fix-lockfile == true)
-        run: |
-          echo "🧹 Linting all packages..."
-          pnpm nx run-many -t lint --all
-          echo "✅ All packages linted successfully"
-
-      - name: 🧹 Run lint on affected packages
-        if: inputs.runAll != true && steps.check-lint.outputs.affected_count != '0' && (steps.validate-lockfile.outputs.lockfile_valid == 'true' || inputs.auto-fix-lockfile == true)
-        run: |
-          echo "🧹 Linting affected packages since ${{ inputs.base-ref }}..."
-          pnpm nx affected -t lint --base="${{ inputs.base-ref }}" --head=HEAD
-          echo "✅ Affected packages linted successfully"
-
-      - name: ⏩ Skip linting (no affected packages)
-        if: inputs.runAll != true && steps.check-lint.outputs.affected_count == '0' && (steps.validate-lockfile.outputs.lockfile_valid == 'true' || inputs.auto-fix-lockfile == true)
-        run: |
-          echo "No affected packages found, skipping linting"
\ No newline at end of file
diff --git a/.github/bak/release.yml b/.github/bak/release.yml
deleted file mode 100644
index eabf4df..0000000
--- a/.github/bak/release.yml
+++ /dev/null
@@ -1,270 +0,0 @@
-name: 📦 Release
-
-on:
-  workflow_dispatch:
-
-permissions:
-  contents: write
-  packages: write
-  pull-requests: write
-
-concurrency: ${{ github.workflow }}-${{ github.ref }}
-
-jobs:
-
-  lint:
-    name: 🧹 Lint Code
-    uses: ./.github/workflows/lint.yml
-    with:
-      base-ref: ${{ github.base_ref }}
-      runAll: true
-      auto-fix-lockfile: false
-    secrets:
-      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
-
-  test:
-    name: 🧪 Run Tests
-    uses: ./.github/workflows/test.yml
-    with:
-      base-ref: ${{ github.base_ref }}
-      runAll: true
-      auto-fix-lockfile: false
-    secrets:
-      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
-
-  build:
-    name: 🏗️ Build Project
-    uses: ./.github/workflows/build.yml
-    with:
-      base-ref: ${{ github.base_ref }}
-      runAll: true
-      auto-fix-lockfile: false
-    secrets:
-      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
-
-  release:
-    name: 📦 Version & Publish
-    runs-on: ubuntu-latest
-    needs: [lint, test, build]
-    steps:
-      - name: 📥 Checkout
-        uses: actions/checkout@v4
-        with:
-          fetch-depth: 0
-          fetch-tags: true
-          token: ${{ secrets.GH_PAT }}
-
-      - name: 📦 Setup pnpm
-        uses: pnpm/action-setup@v2
-        with:
-          version: 10.6.4
-
-      - name: 🔧 Setup Node.js
-        uses: actions/setup-node@v4
-        with:
-          node-version: 22
-          cache: 'pnpm'
-          registry-url: 'https://registry.npmjs.org'
-
-      - name: 📥 Install dependencies
-        run: pnpm install --frozen-lockfile
-
-      - name: 🕵️ Check for pending changesets
-        id: check-changesets
-        run: |
-          # Check if there are any changesets
-          if [ -n "$(ls .changeset/*.md 2>/dev/null)" ]; then
-            echo "has_changesets=true" >> $GITHUB_OUTPUT
-            COUNT=$(ls .changeset/*.md 2>/dev/null | wc -l)
-            echo "changesets_count=$COUNT" >> $GITHUB_OUTPUT
-            echo "✅ Found $COUNT changesets"
-          
-            # Save a copy of the changesets for later reference
-            mkdir -p .changeset-backup
-            cp .changeset/*.md .changeset-backup/ 2>/dev/null || true
-          
-            # Generate detailed information about the changes
-            pnpm changeset status --output .changeset/status.json
-            cp .changeset/status.json .changeset-backup/status.json
-          else
-            echo "has_changesets=false" >> $GITHUB_OUTPUT
-            echo "changesets_count=0" >> $GITHUB_OUTPUT
-            echo "⚠️ No changesets found"
-          fi
-
-
-
-      - name: 🔑 Validate NPM_TOKEN and setup .npmrc
-        if: steps.check-changesets.outputs.has_changesets != 'true'
-        run: |
-          # Check if NPM_TOKEN is set
-          if [ -z "$NPM_TOKEN" ]; then
-            echo "::error::NPM_TOKEN is not set. Cannot publish packages without a valid token."
-            exit 1
-          fi
-    
-          # Verify token with npm
-          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
-          if ! npm whoami >/dev/null 2>&1; then
-            echo "::error::NPM_TOKEN is invalid or expired. Please provide a valid token."
-            rm -f .npmrc
-            exit 1
-          fi
-    
-          echo "✅ NPM_TOKEN is valid"
-          echo "npm_token_valid=true" >> $GITHUB_OUTPUT  # Set output for next steps   
-          rm -f .npmrc  # Remove the .npmrc file
-        env:
-          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
-
-      - name: 📣 Create Release Pull Request or Publish to npm
-        id: changesets
-        uses: changesets/action@v1
-        with:
-          commit: 'chore: version packages'
-          title: 'chore: version packages'
-          version: pnpm changeset version
-          publish: pnpm changeset publish
-          createGithubReleases: false  # Disable built-in release creation
-        env:
-          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
-          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
-          HUSKY: 0
-
-      - name: 📝 Generate release information
-        id: release-info
-        if: steps.changesets.outputs.published == 'true'
-        run: |
-          # Get the latest tag
-          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "v0.0.0")
-          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
-          
-          # Parse the published packages
-          PUBLISHED_PACKAGES='${{ steps.changesets.outputs.publishedPackages }}'
-          echo "published_packages=$PUBLISHED_PACKAGES" >> $GITHUB_OUTPUT
-          
-          # Check if we have the backup status file
-          if [ -f ".changeset-backup/status.json" ]; then
-            echo "✅ Found changeset status backup"
-          
-            # Create release notes header
-            echo "# 🚀 Release $LATEST_TAG" > release-notes.md
-            echo "" >> release-notes.md
-            echo "## 📦 Published Packages" >> release-notes.md
-            echo "" >> release-notes.md
-          
-            # Add published packages table
-            echo "| Package | Version | Changes |" >> release-notes.md
-            echo "|---------|---------|---------|" >> release-notes.md
-          
-            # Extract package info from the status backup
-            jq -c '.releases[]' .changeset-backup/status.json | while read -r pkg; do
-              PKG_NAME=$(echo $pkg | jq -r '.name')
-              PKG_VERSION=$(echo $pkg | jq -r '.newVersion')
-          
-              # Check if this package was actually published
-              if echo "$PUBLISHED_PACKAGES" | grep -q "\"name\":\"$PKG_NAME\""; then
-                # Look for a changelog for this package
-                CHANGELOG_PATH="./packages/$PKG_NAME/CHANGELOG.md"
-                CHANGES="No changelog"
-          
-                # If changelog exists, extract the latest entry
-                if [ -f "$CHANGELOG_PATH" ]; then
-                  # Try to extract the changes for this version
-                  CHANGES=$(sed -n "/## $PKG_VERSION/,/## /p" $CHANGELOG_PATH | sed "1d;/## /d" | tr -d '\n' | sed 's/^\s*//;s/\s*$//' | head -c 100)
-                  if [ -z "$CHANGES" ]; then
-                    CHANGES="See changelog"
-                  else
-                    CHANGES="$CHANGES..."
-                  fi
-                fi
-          
-                echo "| \`$PKG_NAME\` | \`$PKG_VERSION\` | $CHANGES |" >> release-notes.md
-              fi
-            done
-          
-            # Add a link to full changelogs
-            echo "" >> release-notes.md
-            echo "## 📄 Full Changelogs" >> release-notes.md
-            echo "" >> release-notes.md
-            echo "See the attached changelogs.zip file for detailed change information." >> release-notes.md
-          else
-            # Fallback if we don't have the backup
-            echo "# 🚀 Release $LATEST_TAG" > release-notes.md
-            echo "" >> release-notes.md
-            echo "## 📦 Published Packages" >> release-notes.md
-            echo "" >> release-notes.md
-          
-            # Use the publishedPackages output directly
-            echo "$PUBLISHED_PACKAGES" | jq -r 'map("| `" + .name + "` | `" + .version + "` | See changelog |") | .[]' >> release-notes.md
-          fi
-          
-          cat release-notes.md
-
-
-      - name: 📦 Package all CHANGELOGs
-        if: steps.changesets.outputs.published == 'true'
-        run: |
-          mkdir -p release-assets
-          
-          # Find and copy all CHANGELOG.md files
-          find ./packages -name "CHANGELOG.md" -exec cp --parents {} release-assets/ \;
-          
-          # Create a zip with proper directory structure
-          cd release-assets
-          
-          # Check if there are any files to zip
-          if [ "$(find . -type f | wc -l)" -gt 0 ]; then
-            zip -r changelogs.zip .
-            echo "✅ Created changelogs.zip with $(find . -name "CHANGELOG.md" | wc -l) changelog files"
-          else
-            echo "⚠️ No changelog files found, creating an empty zip"
-            echo "No changelog files found" > empty.txt
-            zip -r changelogs.zip empty.txt
-          fi
-          
-          cd ..
-
-
-      - name: 🗃️ Copy coverage artifacts
-        if: steps.changesets.outputs.published == 'true' && hashFiles('coverage/lcov.info') != ''
-        run: |
-          # Copy coverage files if they exist
-          if [ -f "coverage/lcov.info" ]; then
-            cp coverage/lcov.info release-assets/
-            echo "✅ Copied coverage/lcov.info to release assets"
-          fi
-
-
-      - name: 🏷️ Create GitHub Release
-        if: steps.changesets.outputs.published == 'true'
-        uses: softprops/action-gh-release@v1
-        with:
-          tag_name: ${{ steps.release-info.outputs.latest_tag }}
-          name: Release ${{ steps.release-info.outputs.latest_tag }}
-          body_path: release-notes.md
-          files: |
-            release-assets/changelogs.zip
-            release-assets/lcov.info
-        env:
-          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
-
-      - name: 📝 PR Status Update
-        if: steps.changesets.outputs.published != 'true' && steps.check-changesets.outputs.has_changesets == 'true'
-        run: |
-          echo "::notice::A version PR has been created or updated by the changesets action."
-          echo "This PR will update package versions and changelogs."
-          echo "Packages will be published when the PR is merged into main."
-          
-          # The Changesets action will have created a branch called 'changeset-release/main'
-          # We can get the PR associated with this branch
-          PR_NUMBER=$(gh pr list --base main --head changeset-release/main --json number --jq '.[0].number')
-          
-          if [ -n "$PR_NUMBER" ]; then
-            echo "::notice::Version PR #$PR_NUMBER has been created or updated"
-          
-            # Optional: You could add a comment to the PR with additional information
-            gh pr comment $PR_NUMBER --body "## ℹ️ Version PR Updated\nThis PR contains version updates for $(cat .changeset-backup/status.json | jq '.releases | length') packages."
-          fi
-        env:
-          GH_TOKEN: ${{ secrets.GH_PAT }}
\ No newline at end of file
diff --git a/.github/bak/test.yml b/.github/bak/test.yml
deleted file mode 100644
index 0aad85d..0000000
--- a/.github/bak/test.yml
+++ /dev/null
@@ -1,179 +0,0 @@
-name: Test
-
-on:
-  workflow_call:
-    inputs:
-      base-ref:
-        required: true
-        type: string
-        description: 'Base reference for determining affected packages'
-      runAll:
-        required: false
-        type: boolean
-        default: false
-        description: 'Whether to run all tests or just affected'
-      auto-fix-lockfile:
-        required: false
-        type: boolean
-        default: false
-        description: 'Automatically update lockfile if out of date'
-    secrets:
-      NX_CLOUD_ACCESS_TOKEN:
-        required: true
-        description: 'Nx Cloud access token for distributed task execution'
-  workflow_dispatch:
-    inputs:
-      base-ref:
-        description: 'Base reference for determining affected packages'
-        required: true
-        default: 'main'
-        type: string
-      runAll:
-        description: 'Run all tests instead of just affected'
-        required: false
-        default: false
-        type: boolean
-      auto-fix-lockfile:
-        description: 'Automatically update lockfile if out of date'
-        required: false
-        default: false
-        type: boolean
-
-jobs:
-  test:
-    name: 🧪 Test
-    runs-on: ubuntu-latest
-    env:
-      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
-
-    steps:
-      - uses: actions/checkout@v4
-        with:
-          fetch-depth: 0
-          fetch-tags: true
-
-      - name: 🔍 Validate workflow configuration
-        run: |
-          echo "🔄 Current branch: $(git branch --show-current)"
-          echo "🔄 Base reference: ${{ inputs.base-ref }}"
-          echo "🔄 Test mode: ${{ inputs.runAll == true && 'ALL PACKAGES' || 'AFFECTED PACKAGES' }}"
-          echo "🔄 Node.js version: ${{ matrix.node }}"
-          echo "🔄 NX Cloud enabled: ${{ env.NX_CLOUD_ACCESS_TOKEN != '' && 'YES' || 'NO' }}"
-          echo "🔄 Auto-fix lockfile: ${{ inputs.auto-fix-lockfile == true && 'YES' || 'NO' }}"
-
-      - uses: pnpm/action-setup@v2
-        name: 🧰 Setup pnpm
-        with:
-          version: 10.6.4
-
-      - uses: actions/setup-node@v4
-        name: 🧰 Setup Node.js v22
-        with:
-          node-version: 22
-          cache: 'pnpm'
-
-      - name: ♻️ Restore pnpm cache
-        uses: actions/cache@v4
-        with:
-          path: ~/.pnpm-store
-          key: ${{ runner.os }}-node-${{ matrix.node }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
-          restore-keys: |
-            ${{ runner.os }}-node-${{ matrix.node }}-pnpm-store-
-            ${{ runner.os }}-pnpm-store-
-
-      - name: 📦 Check package.json files
-        id: check-packages
-        run: |
-          # List any package.json files that have changed
-          echo "Changed package files:"
-          git diff --name-only ${{ inputs.base-ref }} HEAD | grep package.json || echo "No package.json files changed"
-          
-          # Check for problematic packages if any are known
-          if [ -f "tools/alienfish-core/package.json" ]; then
-            echo "Found tools/alienfish-core/package.json"
-            echo "Dependencies:"
-            cat tools/alienfish-core/package.json | grep -A 20 dependencies || true
-          fi
-
-      - name: 📋 Validate lockfile status
-        id: validate-lockfile
-        run: |
-          # Check if lockfile matches package.json files
-          if pnpm install --frozen-lockfile --prefer-offline > /dev/null 2>&1; then
-            echo "Lockfile is up to date"
-            echo "lockfile_valid=true" >> $GITHUB_OUTPUT
-          else
-            echo "⚠️ Lockfile is out of date"
-            echo "lockfile_valid=false" >> $GITHUB_OUTPUT
-          fi
-
-      - name: 🔄 Install dependencies (frozen lockfile)
-        if: steps.validate-lockfile.outputs.lockfile_valid == 'true'
-        run: pnpm install --frozen-lockfile
-
-      - name: 🔄 Update lockfile and install dependencies
-        if: steps.validate-lockfile.outputs.lockfile_valid == 'false' && inputs.auto-fix-lockfile == true
-        run: |
-          echo "🔄 Updating lockfile and installing dependencies..."
-          pnpm install --no-frozen-lockfile
-          
-          # Output the changes to the lockfile for debugging
-          echo "📝 Changes to lockfile:"
-          git diff pnpm-lock.yaml | grep -E '^\+|\-' | head -20
-          
-          echo "✅ Dependencies installed with updated lockfile"
-
-      - name: ❌ Lockfile mismatch error
-        if: steps.validate-lockfile.outputs.lockfile_valid == 'false' && inputs.auto-fix-lockfile != true
-        run: |
-          echo "::error::Lockfile is out of date with package.json files"
-          echo "Try one of the following solutions:"
-          echo "1. Run 'pnpm install' locally and commit the updated lockfile"
-          echo "2. Run this workflow with 'auto-fix-lockfile' set to true"
-          echo "3. Use '--no-frozen-lockfile' in your CI script (less recommended)"
-          
-          # Specific error for the alienfish-core package
-          if [ -f "tools/alienfish-core/package.json" ]; then
-            echo "::error::Specifically check tools/alienfish-core/package.json dependencies"
-          fi
-          
-          exit 1
-
-      # Check if there are any tests to run
-      - name: 🔍 Check for tests to run
-        id: check-tests
-        if: inputs.runAll != true && (steps.validate-lockfile.outputs.lockfile_valid == 'true' || inputs.auto-fix-lockfile == true)
-        run: |
-          echo "Checking for affected projects with tests..."
-          AFFECTED_COUNT=$(pnpm nx show projects --affected --base="${{ inputs.base-ref }}" --head=HEAD | wc -l)
-          echo "Found $AFFECTED_COUNT affected projects"
-          echo "affected_count=$AFFECTED_COUNT" >> $GITHUB_OUTPUT
-
-      # Run tests based on runAll flag
-      - name: 🧪 Run all tests
-        if: inputs.runAll == true && (steps.validate-lockfile.outputs.lockfile_valid == 'true' || inputs.auto-fix-lockfile == true)
-        run: |
-          echo "Running tests for all packages..."
-          pnpm nx run-many -t test
-          echo "✅ All tests completed"
-
-      - name: 🧪 Run affected tests
-        if: inputs.runAll != true && steps.check-tests.outputs.affected_count != '0' && (steps.validate-lockfile.outputs.lockfile_valid == 'true' || inputs.auto-fix-lockfile == true)
-        run: |
-          echo "Running tests for affected packages since ${{ inputs.base-ref }}..."
-          pnpm nx affected -t test --base="${{ inputs.base-ref }}" --head=HEAD --coverage
-          echo "✅ Affected tests completed"
-
-      - name: ⏩ Skip tests (no affected packages)
-        if: inputs.runAll != true && steps.check-tests.outputs.affected_count == '0' && (steps.validate-lockfile.outputs.lockfile_valid == 'true' || inputs.auto-fix-lockfile == true)
-        run: |
-          echo "No affected packages found, skipping tests"
-
-      # Save test coverage artifacts
-      - name: 📊 Save coverage reports
-        if: always() && (inputs.runAll == true || steps.check-tests.outputs.affected_count != '0') && (steps.validate-lockfile.outputs.lockfile_valid == 'true' || inputs.auto-fix-lockfile == true)
-        uses: actions/upload-artifact@v4
-        with:
-          name: coverage-reports
-          path: packages/*/coverage/lcov.info
-          retention-days: 7
\ No newline at end of file
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index fc7d045..31ee789 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -2,241 +2,154 @@ name: 🚀 CI Pipeline
 
 on:
   push:
-    branches: [main, develop]
+    branches: [main, development, release/*]
   pull_request:
-    branches: [main, develop]
+    types: [opened, synchronize, reopened, ready_for_review]
+  workflow_dispatch:
+    inputs:
+      cache-version:
+        description: "Cache version"
+        required: false
+        type: string
+        default: "v1"
+      node-version:
+        description: "Node.js version"
+        required: false
+        type: string
+        default: "22"
+      pnpm-version:
+        description: "pnpm version"
+        required: false
+        type: string
+        default: "10.6.4"
 
 jobs:
   setup:
     name: 🧰 Setup
-    uses: ./.github/workflows/setup.yml
+    uses: ./.github/workflows/lib/setup.yml
     with:
-      cache-version: "v1"
-      node-version: "22"
-      pnpm-version: "10.6.4"
+      cache-version: ${{ inputs.cache-version || 'v1' }}
+      node-version: ${{ inputs.node-version || '22' }}
+      pnpm-version: ${{ inputs.pnpm-version || '10.6.4' }}
       sparse-checkout: false
     secrets:
-      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
-      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
+      GH_TOKEN: ${{ secrets.GH_PAT }}
+
 
   lint:
     name: 🧹 Lint
     needs: setup
-    runs-on: ubuntu-latest
-    steps:
-      - name: 📥 Checkout repository
-        uses: actions/checkout@v4
-        with:
-          fetch-depth: 0  # Important: Need full history
-
-      - name: 🧮 Calculate Nx Base and Head
-        uses: nrwl/nx-set-shas@v4
-        with:
-          main-branch-name: 'main'  # Adjust if your main branch has a different name
-
-      - name: 📦 Setup pnpm
-        uses: pnpm/action-setup@v2
-        with:
-          version: 10.6.4
-
-      - name: 🟢 Setup Node.js
-        uses: actions/setup-node@v4
-        with:
-          node-version: 22
-
-      # Restore dependency cache
-      - name: 📚 Restore dependency cache
-        uses: actions/cache@v4
-        with:
-          path: |
-            node_modules
-            */*/node_modules
-          key: ${{ needs.setup.outputs.pnpm-cache-key }}
-
-      # Restore Nx cache
-      - name: 💾 Restore Nx cache
-        uses: actions/cache@v4
-        with:
-          path: .nx/cache
-          key: ${{ needs.setup.outputs.nx-cache-key }}
-
-      # Run lint with the SHAs set by nx-set-shas
-      - name: 🧹 Run linting
-        run: |
-          echo "🔍 Running lint on affected projects..."
-          echo "Using base: $NX_BASE"
-          echo "Using head: $NX_HEAD"
-          
-          pnpm nx affected --target=lint
-          echo "✅ Lint completed successfully"
+    uses: ./.github/workflows/lib/lint.yml
+    with:
+      node-version: ${{ inputs.node-version || '22' }}
+      pnpm-version: ${{ inputs.pnpm-version || '10.6.4' }}
+      pnpm-cache-key: ${{ needs.setup.outputs.pnpm-cache-key }}
+    secrets:
+      inherit
 
   test:
     name: 🧪 Test
     needs: setup
-    runs-on: ubuntu-latest
-    steps:
-      - name: 📥 Checkout repository
-        uses: actions/checkout@v4
-        with:
-          fetch-depth: 0
-
-      - name: 🧮 Calculate Nx Base and Head
-        uses: nrwl/nx-set-shas@v4
-        with:
-          main-branch-name: 'main'
-
-      - name: 📦 Setup pnpm
-        uses: pnpm/action-setup@v2
-        with:
-          version: 10.6.4
-
-      - name: 🟢 Setup Node.js
-        uses: actions/setup-node@v4
-        with:
-          node-version: 22
-
-      # Restore dependency cache
-      - name: 📚 Restore dependency cache
-        uses: actions/cache@v4
-        with:
-          path: |
-            node_modules
-            */*/node_modules
-          key: ${{ needs.setup.outputs.pnpm-cache-key }}
-
-      # Restore Nx cache
-      - name: 💾 Restore Nx cache
-        uses: actions/cache@v4
-        with:
-          path: .nx/cache
-          key: ${{ needs.setup.outputs.nx-cache-key }}
-
-      # Run tests with the SHAs set by nx-set-shas
-      - name: 🧪 Run tests
-        run: |
-          echo "🔍 Running tests on affected projects..."
-          echo "Using base: $NX_BASE"
-          echo "Using head: $NX_HEAD"
-          
-          pnpm nx affected --target=test
-          echo "✅ Tests completed successfully"
-
-      - name: 📊 Test Summary
-        if: always()
-        run: |
-          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
-          echo "" >> $GITHUB_STEP_SUMMARY
-          
-          if [ ${{ job.status }} == 'success' ]; then
-            echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
-          else
-            echo "❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
-          fi
-
-  
+    uses: ./.github/workflows/lib/test.yml
+    with:
+      node-version: ${{ inputs.node-version || '22' }}
+      pnpm-version: ${{ inputs.pnpm-version || '10.6.4' }}
+      pnpm-cache-key: ${{ needs.setup.outputs.pnpm-cache-key }}
+      run-affected: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || false }}
+      upload-coverage: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || false }}
+    secrets:
+      inherit
 
   build:
     name: 🏗️ Build
-    needs: [ setup, lint, test ]
+    needs: [setup]
+    uses: ./.github/workflows/lib/build.yml
+    with:
+      node-version: ${{ inputs.node-version || '22' }}
+      pnpm-version: ${{ inputs.pnpm-version || '10.6.4' }}
+      pnpm-cache-key: ${{ needs.setup.outputs.pnpm-cache-key }}
+    secrets: inherit
+
+  release:
+    name: 📦 Release
+    needs: [lint, test, build]
+    # Only run on pushes to main that come from merging a release/* branch
+    if: github.event_name == 'workflow_dispatch'
     runs-on: ubuntu-latest
     steps:
-      - name: 📥 Checkout repository
-        uses: actions/checkout@v4
+      - name: Checkout code
+        uses: actions/checkout@v3
         with:
           fetch-depth: 0
+          token: ${{ secrets.GITHUB_TOKEN }}
 
-      - name: 🧮 Calculate Nx Base and Head
-        uses: nrwl/nx-set-shas@v4
-        with:
-          main-branch-name: 'main'
-
-      - name: 📦 Setup pnpm
-        uses: pnpm/action-setup@v2
-        with:
-          version: 10.6.4
+      - name: Extract release version
+        id: extract-version
+        run: |
+          PR_BODY=$(git log -1 --pretty=%B)
+          RELEASE_BRANCH=$(echo "$PR_BODY" | grep -o 'from release/[^ ]*' | sed 's/from release\///')
+          if [[ -z "$RELEASE_BRANCH" ]]; then
+            echo "No release branch found. Skipping release."
+            exit 1
+          fi
+          echo "RELEASE_VERSION=${RELEASE_BRANCH}" >> $GITHUB_ENV
+          echo "release_version=${RELEASE_BRANCH}" >> $GITHUB_OUTPUT
 
-      - name: 🟢 Setup Node.js
-        uses: actions/setup-node@v4
+      - name: Check for GitHub Release
+        id: check-release
+        uses: octokit/request-action@v2.x
         with:
-          node-version: 22
+          route: GET /repos/{owner}/{repo}/releases/tags/v${{ steps.extract-version.outputs.release_version }}
+        env:
+          GITHUB_TOKEN: ${{ secrets.GH_PAM }}
+        continue-on-error: true
 
-      # Restore dependency cache
-      - name: 📚 Restore dependency cache
-        uses: actions/cache@v4
+      - name: Setup Node.js
+        if: steps.check-release.outcome == 'failure'
+        uses: actions/setup-node@v3
         with:
-          path: |
-            node_modules
-            */*/node_modules
-          key: ${{ needs.setup.outputs.pnpm-cache-key }}
+          node-version: ${{ inputs.node-version || '22' }}
+          registry-url: 'https://registry.npmjs.org'
 
-      # Restore Nx cache
-      - name: 💾 Restore Nx cache
-        uses: actions/cache@v4
+      - name: Setup pnpm
+        if: steps.check-release.outcome == 'failure'
+        uses: pnpm/action-setup@v2
         with:
-          path: .nx/cache
-          key: ${{ needs.setup.outputs.nx-cache-key || format('{0}-node{1}-nx', 'v1', '22') }}
-          restore-keys: |
-            ${{ needs.setup.outputs.nx-cache-key || format('{0}-node{1}-nx', 'v1', '22') }}
-            v1-node22-nx-
+          version: ${{ inputs.pnpm-version || '10.6.4' }}
 
-      # Run build with the SHAs set by nx-set-shas
-      - name: 🏗️ Build affected projects
+      - name: Configure Git
+        if: steps.check-release.outcome == 'failure'
         run: |
-          echo "🔍 Building affected projects..."
-          echo "Using base: $NX_BASE"
-          echo "Using head: $NX_HEAD"
+          git config --global user.name "${GITHUB_ACTOR}"
+          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
 
-          pnpm nx affected --target=build --parallel=3
-          echo "✅ Build completed successfully"
-
-      # Cache build artifacts for potential deployment jobs
-      - name: 💾 Cache build artifacts
-        uses: actions/cache@v4
-        id: build-cache
-        with:
-          path: |
-            dist
-            */*/dist
-            .next
-            */*/build
-          key: build-${{ github.sha }}
-
-      # Updated to v4
-      - name: 📤 Upload build artifacts
-        uses: actions/upload-artifact@v4
-        with:
-          name: build-artifacts
-          path: |
-            dist
-            */*/dist
-          retention-days: 3
+      - name: Install dependencies
+        if: steps.check-release.outcome == 'failure'
+        run: pnpm install --frozen-lockfile
 
-      - name: 📊 Build Summary
+      - name: Create and publish release
+        if: steps.check-release.outcome == 'failure'
         run: |
-          echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
-          echo "" >> $GITHUB_STEP_SUMMARY
-          echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
-          echo "" >> $GITHUB_STEP_SUMMARY
-
-          echo "### 📦 Build Artifacts" >> $GITHUB_STEP_SUMMARY
-          echo "" >> $GITHUB_STEP_SUMMARY
-          echo "| Directory | Size |" >> $GITHUB_STEP_SUMMARY
-          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
-
-          # Create a temp file for the artifact list
-          ARTIFACTS_FILE=$(mktemp)
-
-          # Find all dist directories and append to the file
-          find . -type d -name "dist" | while read dir; do
-            SIZE=$(du -sh "$dir" | cut -f1)
-            echo "| \`$dir\` | $SIZE |" >> $ARTIFACTS_FILE
-          done
-
-          # Append the artifact list to the step summary
-          cat $ARTIFACTS_FILE >> $GITHUB_STEP_SUMMARY
-
-          # Remove the temp file
-          rm $ARTIFACTS_FILE
-
-          echo "" >> $GITHUB_STEP_SUMMARY
-          echo "Artifacts are available for download from this workflow run." >> $GITHUB_STEP_SUMMARY
\ No newline at end of file
+          pnpm changeset version
+          
+          # Create a detailed commit message
+          git add .
+          git commit -m "chore(release): publish v${{ steps.extract-version.outputs.release_version }} [skip ci]" \
+                   -m "This release includes all changes from release/${{ steps.extract-version.outputs.release_version }}" \
+                   -m "Generated by the CI release automation."
+          
+          # Publish to npm
+          pnpm changeset publish
+        env:
+          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
+          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
+
+      - name: Create GitHub Release
+        if: steps.check-release.outcome == 'failure'
+        uses: softprops/action-gh-release@v1
+        with:
+          tag_name: v${{ steps.extract-version.outputs.release_version }}
+          name: Release v${{ steps.extract-version.outputs.release_version }}
+          generate_release_notes: true
+        env:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
\ No newline at end of file
diff --git a/.github/workflows/lib/build.yml b/.github/workflows/lib/build.yml
new file mode 100644
index 0000000..9e1156f
--- /dev/null
+++ b/.github/workflows/lib/build.yml
@@ -0,0 +1,133 @@
+name: 🏗️ Build the Application
+
+on:
+  workflow_call:
+    inputs:
+      pnpm-cache-key:
+        description: "The generated pnpm cache key"
+        required: true
+        type: string
+      node-version:
+        description: "Node.js version"
+        required: false
+        default: "22"
+        type: string
+      pnpm-version:
+        description: "pnpm version"
+        required: false
+        default: "10.6.4"
+        type: string
+    secrets:
+      NX_CLOUD_ACCESS_TOKEN:
+        description: "Nx Cloud access token"
+        required: true
+    outputs:
+      build-summary:
+        description: "Build summary"
+        value: ${{ jobs.build.outputs.build-summary }}
+
+jobs:
+  build:
+    name: 🏗️ Build
+    runs-on: ubuntu-latest
+    env:
+      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
+    outputs:
+      build-summary: ${{ steps.build-summary.outputs.build-summary }}
+    steps:
+      - name: 📥 Checkout repository
+        uses: actions/checkout@v4
+        with:
+          fetch-depth: 0
+
+      - name: 🧮 Calculate Nx Base and Head
+        uses: nrwl/nx-set-shas@v4
+        with:
+          main-branch-name: 'main'
+
+      - name: 📦 Setup pnpm
+        uses: pnpm/action-setup@v2
+        with:
+          version: ${{ inputs.pnpm-version }}
+
+      - name: 🟢 Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: ${{ inputs.node-version }}
+          cache: 'pnpm'
+
+      - name: 📚 Restore dependency cache
+        id: cache-deps
+        uses: actions/cache@v4
+        with:
+          path: |
+            node_modules
+            */*/node_modules
+          key: ${{ inputs.pnpm-cache-key }}
+
+      - name: 📥 Install dependencies
+        if: steps.cache-deps.outputs.cache-hit != 'true'
+        run: |
+          echo "🔄 Cache miss - Installing dependencies..."
+          pnpm install --frozen-lockfile
+          echo "✅ Dependencies installed successfully"     
+
+      - name: Create build cache key
+        id: build-cache-key
+        run: echo "build-cache-key=build-${{ inputs.cache-version }}-node-${{ inputs.node-version }}-pnpm${{ inputs.pnpm-version }}-${{ github.sha }}" >> $GITHUB_OUTPUT
+
+      - name: 💾 Cache build artifacts
+        uses: actions/cache@v4
+        id: build-cache
+        with:
+          path: |
+            dist
+            */*/dist
+          key: ${{ steps.build-cache-key.outputs.build-cache-key }}
+
+      - name: 🏗️ Build affected projects
+        if: steps.build-cache.outputs.cache-hit != 'true'
+        run: |
+          echo "🔍 Building affected projects..."
+          echo "Using base: $NX_BASE"
+          echo "Using head: $NX_HEAD"
+
+          pnpm nx affected --target=build --head=${{ env.NX_HEAD }} --base=${{ env.NX_BASE }} --parallel=3
+          echo "✅ Build completed successfully"
+
+      - name: 📤 Upload build artifacts
+        if: steps.build-cache.outputs.cache-hit != 'true'
+        uses: actions/upload-artifact@v4
+        with:
+          name: build-artifacts-node-${{ inputs.node-version }}-pnpm-${{ inputs.pnpm-version }}-${{ github.sha }}
+          path: |
+            dist
+            */*/dist
+          retention-days: 3
+
+      - name: 📊 Generate Build Summary
+        id: build-summary
+        run: |
+          echo "BUILD_SUMMARY<<EOF" >> $GITHUB_ENV
+          echo "## 🏗️ Build Results" >> $GITHUB_ENV
+          echo "" >> $GITHUB_ENV
+          echo "✅ Build completed successfully" >> $GITHUB_ENV
+          echo "" >> $GITHUB_ENV
+          echo "### 📦 Build Artifacts" >> $GITHUB_ENV
+          echo "" >> $GITHUB_ENV
+          echo "| Directory | Size |" >> $GITHUB_ENV
+          echo "| --- | --- |" >> $GITHUB_ENV
+          
+          find . -type d -name "dist" | while read dir; do
+            SIZE=$(du -sh "$dir" | cut -f1)
+            echo "| \`$dir\` | $SIZE |" >> $GITHUB_ENV
+          done
+          
+          echo "" >> $GITHUB_ENV
+          echo "Artifacts are available for download from this workflow run." >> $GITHUB_ENV
+          echo "EOF" >> $GITHUB_ENV
+
+      - name: 📝 Output Build Summary
+        run: |
+          echo "${{ env.BUILD_SUMMARY }}" >> $GITHUB_STEP_SUMMARY
+          echo "build-summary=${{ env.BUILD_SUMMARY }}" >> $GITHUB_OUTPUT
\ No newline at end of file
diff --git a/.github/workflows/lib/canary.yml b/.github/workflows/lib/canary.yml
new file mode 100644
index 0000000..c8e5fa3
--- /dev/null
+++ b/.github/workflows/lib/canary.yml
@@ -0,0 +1,49 @@
+name: 🧪 Canary Release
+
+on:
+  pull_request:
+    branches: [development]
+    types: [opened, synchronize, reopened]
+
+permissions:
+  contents: read
+  packages: write
+  id-token: write
+
+jobs:
+  canary:
+    name: 🚧 Publish Canary Versions
+    runs-on: ubuntu-latest
+
+    steps:
+      - name: 📥 Checkout repository
+        uses: actions/checkout@v4
+        with:
+          fetch-depth: 0
+
+      - name: 🟢 Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: 22
+          registry-url: 'https://registry.npmjs.org'
+          always-auth: true
+
+      - name: 📦 Setup PNPM
+        uses: pnpm/action-setup@v2
+        with:
+          version: 10.6.4
+
+      - name: 📚 Install dependencies
+        run: pnpm install --frozen-lockfile
+
+      - name: 🧬 Get short commit hash
+        id: vars
+        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
+
+      - name: 🚀 Publish canary packages
+        env:
+          NODE_ENV: development
+          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
+        run: |
+          echo "🔖 Publishing canary versions with hash: ${{ steps.vars.outputs.hash }}"
+          pnpm changeset publish --tag canary --snapshot ${{ steps.vars.outputs.hash }}
diff --git a/.github/workflows/lib/codecov.yml b/.github/workflows/lib/codecov.yml
new file mode 100644
index 0000000..9e3299b
--- /dev/null
+++ b/.github/workflows/lib/codecov.yml
@@ -0,0 +1,246 @@
+name: 📊 CodeCov Upload for Releases
+
+on:
+  workflow_call:
+    secrets:
+      CODECOV_TOKEN:
+        required: true
+        description: 'Token for uploading coverage to Codecov'
+      NX_CLOUD_ACCESS_TOKEN:
+        required: true
+        description: 'Nx Cloud access token for distributed task execution'
+    outputs:
+      coverage-artifact-name:
+        description: "Name of the uploaded coverage artifact"
+        value: ${{ jobs.upload-coverage.outputs.artifact-name }}
+
+env:
+  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
+
+jobs:
+  verify-branch:
+    name: ✅ Verify Main Branch
+    runs-on: ubuntu-latest
+    steps:
+      - name: 📥 Checkout repository
+        uses: actions/checkout@v4
+        with:
+          fetch-depth: 1
+
+      - name: 🔍 Verify main branch
+        id: verify-branch
+        run: |
+          CURRENT_BRANCH=$(git branch --show-current || git symbolic-ref --short HEAD || echo ${GITHUB_REF#refs/heads/})
+          echo "Current branch: $CURRENT_BRANCH"
+          
+          if [[ "$CURRENT_BRANCH" != "main" && "${GITHUB_REF#refs/heads/}" != "main" ]]; then
+            echo "::error::This workflow must run on the main branch only. Current branch: $CURRENT_BRANCH"
+            exit 1
+          fi
+          
+          echo "✓ Running on main branch. Proceeding with coverage generation."
+
+  setup:
+    name: 🧰 Setup
+    needs: verify-branch
+    uses: ./.github/workflows/setup.yml
+    with:
+      cache-version: "v1"
+      node-version: "22"
+      pnpm-version: "10.6.4"
+      sparse-checkout: false
+    secrets:
+      GH_TOKEN: ${{ secrets.GH_PAT }}
+      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
+
+  test-and-coverage:
+    name: 🧪 Generate Coverage Reports
+    needs: setup
+    runs-on: ubuntu-latest
+    outputs:
+      artifact-name: ${{ steps.package-coverage.outputs.artifact-name }}
+    steps:
+      - name: 📥 Checkout repository
+        uses: actions/checkout@v4
+        with:
+          fetch-depth: 0
+          ref: main # Explicitly checkout main branch
+
+      - name: 📦 Setup pnpm
+        uses: pnpm/action-setup@v2
+        with:
+          version: 10.6.4
+
+      - name: 🟢 Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: 22
+
+      # Restore dependency cache
+      - name: 📚 Restore dependency cache
+        uses: actions/cache@v4
+        with:
+          path: |
+            node_modules
+            */*/node_modules
+          key: ${{ needs.setup.outputs.pnpm-cache-key }}
+
+      # Restore Nx cache with fallback
+      - name: 💾 Restore Nx cache
+        uses: actions/cache@v4
+        with:
+          path: .nx/cache
+          key: ${{ needs.setup.outputs.nx-cache-key || format('{0}-node{1}-nx', 'v1', '22') }}
+          restore-keys: |
+            ${{ needs.setup.outputs.nx-cache-key || format('{0}-node{1}-nx', 'v1', '22') }}
+            v1-node22-nx-
+
+      # Run tests with coverage - make sure we run all tests, not just affected ones
+      - name: 🧪 Run tests with coverage
+        run: |
+          echo "🔍 Running all tests with coverage for release..."
+          pnpm nx run-many --target=test --all --codeCoverage --configuration=ci
+          echo "✅ Test suite completed"
+
+      # Merge the coverage reports from all packages
+      - name: 🔄 Merge package coverage reports
+        id: merge-coverage
+        run: |
+          echo "🔍 Locating coverage reports in packages directory..."
+          
+          # Create directory for combined coverage
+          mkdir -p combined-coverage
+          
+          # Find all lcov.info files in the packages directory
+          LCOV_COUNT=$(find ./packages -type f -name 'lcov.info' -path '*/coverage/lcov.info' | wc -l)
+          echo "Found $LCOV_COUNT lcov.info files in packages"
+          
+          if [ $LCOV_COUNT -eq 0 ]; then
+            echo "::error::No lcov.info files found in packages directory. Tests may not have generated coverage reports."
+            exit 1
+          fi
+          
+          # Merge all the lcov.info files into one
+          find ./packages -type f -name 'lcov.info' -path '*/coverage/lcov.info' -exec cat {} + > ./combined-coverage/lcov.info
+          
+          # Check if merged file has content
+          MERGED_SIZE=$(wc -c < ./combined-coverage/lcov.info)
+          if [ ! -s ./combined-coverage/lcov.info ] || [ $MERGED_SIZE -eq 0 ]; then
+            echo "::error::Merged coverage file is empty"
+            exit 1
+          fi
+          
+          echo "✅ Successfully merged $LCOV_COUNT package coverage files ($(du -h ./combined-coverage/lcov.info | cut -f1) total)"
+          echo "lcov_count=$LCOV_COUNT" >> $GITHUB_OUTPUT
+          echo "merged_size=$MERGED_SIZE" >> $GITHUB_OUTPUT
+
+      # Get git info for artifact naming
+      - name: 📋 Get Git info
+        id: git-info
+        run: |
+          COMMIT_HASH=$(git rev-parse --short HEAD)
+          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
+          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
+          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
+          echo "Commit hash: $COMMIT_HASH"
+          echo "Timestamp: $TIMESTAMP"
+
+      # Package coverage for release artifacts
+      - name: 📦 Package coverage reports
+        id: package-coverage
+        run: |
+          # Use commit hash and timestamp for artifact naming
+          COMMIT_HASH="${{ steps.git-info.outputs.commit_hash }}"
+          TIMESTAMP="${{ steps.git-info.outputs.timestamp }}"
+          ARTIFACT_NAME="coverage-report-${COMMIT_HASH}-${TIMESTAMP}"
+          
+          # Create directory for artifacts
+          mkdir -p coverage-artifacts
+          cp ./combined-coverage/lcov.info coverage-artifacts/lcov.info
+          
+          # Try to generate HTML report if tools available
+          if command -v genhtml >/dev/null 2>&1; then
+            echo "📊 Generating HTML coverage report..."
+            genhtml ./combined-coverage/lcov.info -o coverage-artifacts/html --title "Coverage Report ${COMMIT_HASH}"
+            echo "✅ HTML coverage report generated"
+          else
+            mkdir -p coverage-artifacts/html
+            echo "<html><body><h1>Coverage Report ${COMMIT_HASH}</h1><p>HTML report unavailable. See lcov.info for raw data.</p></body></html>" > coverage-artifacts/html/index.html
+            echo "ℹ️ lcov tools not available, created placeholder HTML"
+          fi
+          
+          # Create a summary file with repo info
+          {
+            echo "# Coverage Report"
+            echo ""
+            echo "## Repository Information"
+            echo "- **Commit:** ${COMMIT_HASH}"
+            echo "- **Branch:** main"
+            echo "- **Date:** $(date)"
+            echo ""
+            echo "## Coverage Summary"
+            echo "- **Packages covered:** ${{ steps.merge-coverage.outputs.lcov_count }}"
+            echo "- **Report size:** $(du -h ./combined-coverage/lcov.info | cut -f1)"
+            echo ""
+          
+            # List the packages that were covered (up to 20)
+            echo "## Packages"
+            find ./packages -type f -name 'lcov.info' -path '*/coverage/lcov.info' | sort | head -n 20 | while read file; do
+              # Extract package name from path
+              PACKAGE_PATH=$(dirname $(dirname "$file"))
+              PACKAGE_NAME=$(basename "$PACKAGE_PATH")
+              echo "- $PACKAGE_NAME"
+            done
+          
+            if [ ${{ steps.merge-coverage.outputs.lcov_count }} -gt 20 ]; then
+              echo "- ... and $(({{ steps.merge-coverage.outputs.lcov_count }} - 20)) more"
+            fi
+          } > coverage-artifacts/COVERAGE.md
+          
+          echo "artifact-name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
+          echo "✅ Coverage artifacts prepared"
+
+      # Upload to Codecov
+      - name: 📤 Upload to Codecov
+        uses: codecov/codecov-action@v4
+        with:
+          token: ${{ secrets.CODECOV_TOKEN }}
+          files: ./combined-coverage/lcov.info
+          flags: production,release
+          name: ${{ steps.git-info.outputs.commit_hash }}
+          fail_ci_if_error: true
+          verbose: true
+
+      # Upload coverage artifacts for releases
+      - name: 📤 Upload coverage artifact for release
+        uses: actions/upload-artifact@v4
+        with:
+          name: ${{ steps.package-coverage.outputs.artifact-name }}
+          path: coverage-artifacts/
+          retention-days: 90
+
+      # Create a summary for GitHub Actions
+      - name: 📊 Coverage Summary
+        run: |
+          {
+            echo "## 📊 Coverage Report Summary"
+            echo ""
+            echo "✅ Successfully processed ${{ steps.merge-coverage.outputs.lcov_count }} package coverage files"
+            echo ""
+            echo "### 📦 Artifacts"
+            echo "- **Artifact Name:** \`${{ steps.package-coverage.outputs.artifact-name }}\`"
+            echo "- **Coverage Size:** $(du -h ./combined-coverage/lcov.info | cut -f1)"
+            echo "- **Commit:** ${{ steps.git-info.outputs.commit_hash }}"
+            echo ""
+            echo "This report has been uploaded to Codecov and is available as a downloadable artifact."
+          } >> $GITHUB_STEP_SUMMARY
+
+  # Output job to expose the artifact name
+  upload-coverage:
+    name: 📊 Expose Coverage Artifact
+    needs: test-and-coverage
+    runs-on: ubuntu-latest
+    outputs:
+      artifact-name: ${{ needs.test-and-coverage.outputs.artifact-name }}
+    steps:
+      - run: echo "Coverage artifact name is ${{ needs.test-and-coverage.outputs.artifact-name }}"
\ No newline at end of file
diff --git a/.github/workflows/lib/lint.yml b/.github/workflows/lib/lint.yml
new file mode 100644
index 0000000..95665d4
--- /dev/null
+++ b/.github/workflows/lib/lint.yml
@@ -0,0 +1,115 @@
+name: 🧹 Lint
+
+on:
+  workflow_call:
+    inputs:
+      pnpm-cache-key:
+        description: "The generated pnpm cache key"
+        required: true
+        type: string
+      node-version:
+        description: "Node.js version"
+        required: false
+        default: "22"
+        type: string
+      pnpm-version:
+        description: "pnpm version"
+        required: false
+        default: "10.6.4"
+        type: string
+    secrets:
+      NX_CLOUD_ACCESS_TOKEN:
+        description: "Nx Cloud access token"
+        required: true
+    outputs:
+      lint-summary:
+        description: "Lint summary"
+        value: ${{ jobs.lint.outputs.lint-summary }}
+
+jobs:
+  lint:
+    name: 🧹 Lint
+    runs-on: ubuntu-latest
+    env:
+      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
+    outputs:
+      lint-summary: ${{ steps.lint-summary.outputs.lint-summary }}
+    steps:
+      - name: 📥 Checkout repository
+        uses: actions/checkout@v4
+        with:
+          fetch-depth: 0  # Important: Need full history
+
+      - name: 🧮 Calculate Nx Base and Head
+        uses: nrwl/nx-set-shas@v4
+        with:
+          main-branch-name: 'main'
+
+      - name: 🛠️ Setup Environment
+        run: |
+          echo "::group::📦 Setup pnpm"
+          npm install -g pnpm@${{ inputs.pnpm-version }}
+          echo "::endgroup::"
+          
+          echo "::group::🟢 Setup Node.js"
+          NODE_VERSION=${{ inputs.node-version }}
+          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
+          export NVM_DIR="$HOME/.nvm"
+          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
+          nvm install $NODE_VERSION
+          nvm use $NODE_VERSION
+          echo "::endgroup::"
+
+      # Restore dependency cache
+      - name: 📚 Restore dependency cache
+        uses: actions/cache@v4
+        with:
+          path: |
+            node_modules
+            */*/node_modules
+          key: ${{ inputs.pnpm-cache-key }}
+
+      # Install dependencies if cache miss
+      - name: 📥 Install dependencies
+        if: steps.cache-deps.outputs.cache-hit != 'true'
+        run: pnpm install --frozen-lockfile
+
+      # Run lint with the SHAs set by nx-set-shas
+      - name: 🧹 Run linting
+        id: run-lint
+        run: |
+          echo "🔍 Running lint on affected projects..."
+          echo "Using base: $NX_BASE"
+          echo "Using head: $NX_HEAD"
+
+          pnpm nx affected --target=lint --head=${{ env.NX_HEAD }} --base=${{ env.NX_BASE }} --parallel=3 --output-style=stream > lint_output.txt
+          lint_exit_code=$?
+          echo "✅ Lint completed with exit code: $lint_exit_code"
+          echo "lint_exit_code=$lint_exit_code" >> $GITHUB_OUTPUT
+
+      - name: 📊 Generate Lint Summary
+        id: lint-summary
+        run: |
+          echo "LINT_SUMMARY<<EOF" >> $GITHUB_ENV
+          echo "## 🧹 Lint Results" >> $GITHUB_ENV
+          echo "" >> $GITHUB_ENV
+          if [ "${{ steps.run-lint.outputs.lint_exit_code }}" == "0" ]; then
+            echo "✅ Lint passed successfully" >> $GITHUB_ENV
+          else
+            echo "❌ Lint failed" >> $GITHUB_ENV
+            echo "" >> $GITHUB_ENV
+            echo "### Lint Output" >> $GITHUB_ENV
+            echo "\`\`\`" >> $GITHUB_ENV
+            cat lint_output.txt >> $GITHUB_ENV
+            echo "\`\`\`" >> $GITHUB_ENV
+          fi
+          echo "EOF" >> $GITHUB_ENV
+
+      - name: 📝 Output Lint Summary
+        run: |
+          echo "${{ env.LINT_SUMMARY }}" >> $GITHUB_STEP_SUMMARY
+          echo "lint-summary=${{ env.LINT_SUMMARY }}" >> $GITHUB_OUTPUT
+
+      - name: 🚨 Check Lint Status
+        if: steps.run-lint.outputs.lint_exit_code != 0
+        run: exit 1
\ No newline at end of file
diff --git a/.github/workflows/lib/release-pr.yml b/.github/workflows/lib/release-pr.yml
new file mode 100644
index 0000000..de8246d
--- /dev/null
+++ b/.github/workflows/lib/release-pr.yml
@@ -0,0 +1,337 @@
+name: 🔖 Prepare Release PR
+
+on:
+  workflow_dispatch:
+  push:
+    branches:
+      - release/**
+
+permissions:
+  contents: write
+  pull-requests: write
+  id-token: write
+
+jobs:
+  setup:
+    name: 🧰 Setup
+    if: needs.check-changesets.outputs.has_changesets == 'true'
+    uses: ./.github/workflows/setup.yml
+    with:
+      cache-version: "v1"
+      node-version: "22"
+      pnpm-version: "10.6.4"
+      sparse-checkout: false
+    secrets:
+      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
+
+  lint:
+    name: 🧹 Lint
+    needs: setup
+    runs-on: ubuntu-latest
+    steps:
+      - name: 📥 Checkout repository
+        uses: actions/checkout@v4
+        with:
+          fetch-depth: 0  # Important: Need full history
+
+      - name: 🧮 Calculate Nx Base and Head
+        uses: nrwl/nx-set-shas@v4
+        with:
+          main-branch-name: 'main'
+
+      - name: 📦 Setup pnpm
+        uses: pnpm/action-setup@v2
+        with:
+          version: 10.6.4
+
+      - name: 🟢 Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: 22
+
+      # Restore dependency cache
+      - name: 📚 Restore dependency cache
+        uses: actions/cache@v4
+        with:
+          path: |
+            node_modules
+            */*/node_modules
+          key: ${{ needs.setup.outputs.pnpm-cache-key }}
+
+      # Restore Nx cache
+      - name: 💾 Restore Nx cache
+        uses: actions/cache@v4
+        with:
+          path: .nx/cache
+          key: ${{ needs.setup.outputs.nx-cache-key }}
+
+      # Run lint with the SHAs set by nx-set-shas
+      - name: 🧹 Run linting
+        run: |
+          echo "🔍 Running lint on affected projects..."
+          echo "Using base: $NX_BASE"
+          echo "Using head: $NX_HEAD"
+
+          pnpm nx affected --target=lint
+          echo "✅ Lint completed successfully"
+
+  test:
+    name: 🧪 Test
+    needs: setup
+    runs-on: ubuntu-latest
+    steps:
+      - name: 📥 Checkout repository
+        uses: actions/checkout@v4
+        with:
+          fetch-depth: 0
+
+      - name: 🧮 Calculate Nx Base and Head
+        uses: nrwl/nx-set-shas@v4
+        with:
+          main-branch-name: 'main'
+
+      - name: 📦 Setup pnpm
+        uses: pnpm/action-setup@v2
+        with:
+          version: 10.6.4
+
+      - name: 🟢 Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: 22
+
+      # Restore dependency cache
+      - name: 📚 Restore dependency cache
+        uses: actions/cache@v4
+        with:
+          path: |
+            node_modules
+            */*/node_modules
+          key: ${{ needs.setup.outputs.pnpm-cache-key }}
+
+      # Restore Nx cache
+      - name: 💾 Restore Nx cache
+        uses: actions/cache@v4
+        with:
+          path: .nx/cache
+          key: ${{ needs.setup.outputs.nx-cache-key }}
+
+      # Run tests with the SHAs set by nx-set-shas
+      - name: 🧪 Run tests
+        run: |
+          echo "🔍 Running tests on affected projects..."
+          echo "Using base: $NX_BASE"
+          echo "Using head: $NX_HEAD"
+
+          pnpm nx affected --target=test
+          echo "✅ Tests completed successfully"
+
+      - name: 📊 Test Summary
+        if: always()
+        run: |
+          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
+          echo "" >> $GITHUB_STEP_SUMMARY
+
+          if [ ${{ job.status }} == 'success' ]; then
+            echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
+          else
+            echo "❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
+          fi
+
+
+
+  build:
+    name: 🏗️ Build
+    needs: [ setup, lint, test ]
+    runs-on: ubuntu-latest
+    steps:
+      - name: 📥 Checkout repository
+        uses: actions/checkout@v4
+        with:
+          fetch-depth: 0
+
+      - name: 🧮 Calculate Nx Base and Head
+        uses: nrwl/nx-set-shas@v4
+        with:
+          main-branch-name: 'main'
+
+      - name: 📦 Setup pnpm
+        uses: pnpm/action-setup@v2
+        with:
+          version: 10.6.4
+
+      - name: 🟢 Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: 22
+
+      # Restore dependency cache
+      - name: 📚 Restore dependency cache
+        uses: actions/cache@v4
+        with:
+          path: |
+            node_modules
+            */*/node_modules
+          key: ${{ needs.setup.outputs.pnpm-cache-key }}
+
+      # Restore Nx cache
+      - name: 💾 Restore Nx cache
+        uses: actions/cache@v4
+        with:
+          path: .nx/cache
+          key: ${{ needs.setup.outputs.nx-cache-key || format('{0}-node{1}-nx', 'v1', '22') }}
+          restore-keys: |
+            ${{ needs.setup.outputs.nx-cache-key || format('{0}-node{1}-nx', 'v1', '22') }}
+            v1-node22-nx-
+
+      # Run build with the SHAs set by nx-set-shas
+      - name: 🏗️ Build affected projects
+        run: |
+          echo "🔍 Building affected projects..."
+          echo "Using base: $NX_BASE"
+          echo "Using head: $NX_HEAD"
+
+          pnpm nx affected --target=build --parallel=3
+          echo "✅ Build completed successfully"
+
+      # Cache build artifacts for potential deployment jobs
+      - name: 💾 Cache build artifacts
+        uses: actions/cache@v4
+        id: build-cache
+        with:
+          path: |
+            dist
+            */*/dist
+            .next
+            */*/build
+          key: build-${{ github.sha }}
+
+      # Updated to v4
+      - name: 📤 Upload build artifacts
+        uses: actions/upload-artifact@v4
+        with:
+          name: build-artifacts
+          path: |
+            dist
+            */*/dist
+          retention-days: 3
+
+      - name: 📊 Build Summary
+        run: |
+          echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
+          echo "" >> $GITHUB_STEP_SUMMARY
+          echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
+          echo "" >> $GITHUB_STEP_SUMMARY
+
+          echo "### 📦 Build Artifacts" >> $GITHUB_STEP_SUMMARY
+          echo "" >> $GITHUB_STEP_SUMMARY
+          echo "| Directory | Size |" >> $GITHUB_STEP_SUMMARY
+          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
+
+          # Create a temp file for the artifact list
+          ARTIFACTS_FILE=$(mktemp)
+
+          # Find all dist directories and append to the file
+          find . -type d -name "dist" | while read dir; do
+            SIZE=$(du -sh "$dir" | cut -f1)
+            echo "| \`$dir\` | $SIZE |" >> $ARTIFACTS_FILE
+          done
+
+          # Append the artifact list to the step summary
+          cat $ARTIFACTS_FILE >> $GITHUB_STEP_SUMMARY
+
+          # Remove the temp file
+          rm $ARTIFACTS_FILE
+
+          echo "" >> $GITHUB_STEP_SUMMARY
+          echo "Artifacts are available for download from this workflow run." >> $GITHUB_STEP_SUMMARY
+  
+  
+
+  version:
+    name: 🧪 Run Changeset Versioning
+    runs-on: ubuntu-latest
+    needs: [setup]
+    if: needs.setup.outputs.has_changesets == 'true' || needs.setup.outputs.has_changesets == true
+    steps:
+      - name: 📥 Checkout repository
+        uses: actions/checkout@v4
+        with:
+          fetch-depth: 0
+
+      - name: 🟢 Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: 22
+
+      - name: 📦 Setup PNPM
+        uses: pnpm/action-setup@v2
+        with:
+          version: 10.6.4
+
+      # Restore dependency cache
+      - name: 📚 Restore dependency cache
+        uses: actions/cache@v4
+        with:
+          path: |
+            node_modules
+            */*/node_modules
+          key: ${{ needs.setup.outputs.pnpm-cache-key }}
+
+      # Restore Nx cache
+      - name: 💾 Restore Nx cache
+        uses: actions/cache@v4
+        with:
+          path: .nx/cache
+          key: ${{ needs.setup.outputs.nx-cache-key }}
+
+      - name: 🧮 Calculate Nx Base and Head
+        uses: nrwl/nx-set-shas@v4
+        with:
+          main-branch-name: 'main'
+
+      - name: 🛠️ Run changeset version
+        run: pnpm changeset version
+
+      - name: 📤 Commit and push version bump
+        uses: stefanzweifel/git-auto-commit-action@v5
+        with:
+          commit_message: "chore(release): version bump"
+          branch: main
+          commit_user_name: "github-actions[bot]"
+          commit_user_email: "github-actions[bot]@users.noreply.github.com"
+          push_options: --force
+
+
+  draft-pre-release:
+    name: 🚀 Create Pre-release Draft
+    runs-on: ubuntu-latest
+
+    permissions:
+      contents: write  # Needed to create releases
+
+    steps:
+      - name: 🧾 Checkout code
+        uses: actions/checkout@v4
+
+      - name: 🏷️ Determine version from branch name
+        id: get-version
+        run: |
+          # Assumes branch name is release/x.y.z (e.g., release/1.2.3-beta.1)
+          branch_name="${{ github.base_ref }}"
+          version="${branch_name#release/}"
+          echo "version=$version" >> "$GITHUB_OUTPUT"
+
+      - name: 📝 Create GitHub Release (draft + prerelease)
+        uses: softprops/action-gh-release@v1
+        with:
+          tag_name: "v${{ steps.get-version.outputs.version }}"
+          name: "v${{ steps.get-version.outputs.version }}"
+          draft: true
+          prerelease: true
+          body: |
+            This is a draft pre-release generated for PR #${{ github.event.pull_request.number }}.
+            Once this PR is merged, a full release can be published.
+        env:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
diff --git a/.github/workflows/lib/release.yml b/.github/workflows/lib/release.yml
new file mode 100644
index 0000000..69d09d5
--- /dev/null
+++ b/.github/workflows/lib/release.yml
@@ -0,0 +1,50 @@
+name: 📦 Release Packages
+
+on:
+  push:
+    branches: [main]
+
+permissions:
+  contents: write
+  packages: write
+  id-token: write
+
+jobs:
+  release:
+    name: 🚀 Publish & Tag Updated Packages
+    runs-on: ubuntu-latest
+    steps:
+      - name: 📥 Checkout repository
+        uses: actions/checkout@v4
+        with:
+          fetch-depth: 0  # Necessary for tag creation and changelogs
+
+      - name: 📦 Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: 22
+          registry-url: 'https://registry.npmjs.org'
+          always-auth: true
+
+      - name: 📦 Setup PNPM
+        uses: pnpm/action-setup@v2
+        with:
+          version: 10.6.4
+
+      - name: 📚 Install Dependencies
+        run: pnpm install --frozen-lockfile
+
+      - name: 🛠 Version Packages (Changeset)
+        run: pnpm changeset version
+
+      - name: 🚀 Publish to npm
+        env:
+          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
+        run: pnpm changeset publish
+
+      - name: 🏷️ Create GitHub Releases
+        uses: changesets/action@v1
+        with:
+          publish: false
+        env:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
diff --git a/.github/workflows/setup.yml b/.github/workflows/lib/setup.yml
similarity index 69%
rename from .github/workflows/setup.yml
rename to .github/workflows/lib/setup.yml
index 373ae51..bca98db 100644
--- a/.github/workflows/setup.yml
+++ b/.github/workflows/lib/setup.yml
@@ -78,12 +78,12 @@ on:
       pnpm-cache-key:
         description: "Cache key for dependencies"
         value: ${{ jobs.setup.outputs.pnpm-cache-key }}
-      nx-cache-key:
-        description: "Cache key for Nx"
-        value: ${{ jobs.setup.outputs.nx-cache-key }}
       cache-hit:
         description: "Whether dependency cache was hit"
         value: ${{ jobs.setup.outputs.cache-hit }}
+      has-changesets:
+        description: "Whether there are changesets currently in the repo."
+        value: ${{ jobs.check-changesets.outputs.has_changesets }}
     secrets:
       GH_TOKEN:
         description: 'GitHub token for accessing the repository'
@@ -93,6 +93,30 @@ on:
         description: 'Nx Cloud access token for distributed task execution'
 
 jobs:
+  check-changesets:
+    runs-on: ubuntu-latest
+    outputs:
+      has_changesets: ${{ steps.check.outputs.has_changesets }}
+    steps:
+      - name: Checkout code
+        uses: actions/checkout@v3
+
+      - name: Check for changesets
+        run: |
+          echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
+          if [ -d ".changeset" ]; then
+            changeset_files=$(find .changeset -name "*.md" ! -name "README.md" | wc -l)
+            if [ $changeset_files -eq 0 ]; then
+              echo "has_changesets=false" >> $GITHUB_OUTPUT
+              echo "❌No changeset files found in .changeset directory" >> $GITHUB_STEP_SUMMARY
+            else
+              echo "has_changesets=true" >> $GITHUB_OUTPUT
+              echo "✅ Changeset files found in .changeset directory" >> $GITHUB_STEP_SUMMARY
+            fi
+          else
+            echo "❌ .changeset directory not found"
+            exit 1
+          fi
   setup:
     name: 🛠️ Environment Setup
     runs-on: ubuntu-latest
@@ -102,7 +126,6 @@ jobs:
       pull-requests: 'read'
     outputs:
       pnpm-cache-key: ${{ steps.generate-cache-keys.outputs.pnpm-key }}
-      nx-cache-key: ${{ steps.generate-cache-keys.outputs.nx-key }}
       nx-head: ${{ steps.set-nx-vars.outputs.nx-head }}
       cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
     env:
@@ -149,34 +172,14 @@ jobs:
           
           # Get hash of package files
           LOCK_HASH=$(sha256sum pnpm-lock.yaml | cut -d ' ' -f1)
-          
-          # Check if nx.json exists
-          if [ -f "nx.json" ]; then
-            NX_CONFIG_HASH=$(sha256sum nx.json | cut -d ' ' -f1)
-          else
-            NX_CONFIG_HASH="no-nx-config"
-          fi
-          
+           
           # Create and output the cache keys
           PNPM_KEY="${CACHE_VERSION}-node${NODE_VERSION}-pnpm${PNPM_VERSION}-deps-${LOCK_HASH:0:8}"
-          NX_KEY="${CACHE_VERSION}-node${NODE_VERSION}-nx-${LOCK_HASH:0:8}-${NX_CONFIG_HASH:0:8}"
           
           echo "pnpm-key=${PNPM_KEY}" >> $GITHUB_OUTPUT
-          echo "nx-key=${NX_KEY}" >> $GITHUB_OUTPUT
           
           # Log for debugging
           echo "📝 Generated pnpm cache key: ${PNPM_KEY}"
-          echo "📝 Generated nx cache key: ${NX_KEY}"
-
-      - name: 🚄 Cache high-value Nx data
-        id: nx-high-value-cache
-        uses: actions/cache@v4
-        with:
-          path: |
-            .nx-cache-archive
-          key: ${{ steps.generate-cache-keys.outputs.nx-key }}-hvc
-          restore-keys: |
-            ${{ inputs.cache-version }}-node${{ inputs.node-version }}-nx-hvc-
 
       - name: 📚 Cache dependencies
         id: cache-deps
@@ -194,57 +197,6 @@ jobs:
           pnpm install --frozen-lockfile
           echo "✅ Dependencies installed successfully"
 
-      - name: ⚡ Restore high-value Nx cache
-        if: steps.nx-high-value-cache.outputs.cache-hit == 'true'
-        run: |
-          echo "🔄 Restoring optimized Nx cache data..."
-          mkdir -p .nx/cache
-          if [ -d ".nx-cache-archive" ]; then
-            # Restore computation results if they exist
-            if [ -f ".nx-cache-archive/computation-cache.tar.gz" ]; then
-              echo "📥 Restoring Nx computation cache..."
-              tar -xzf .nx-cache-archive/computation-cache.tar.gz -C / || echo "⚠️ Failed to extract computation cache"
-            fi
-          
-            # Restore file hashes if they exist
-            if [ -f ".nx-cache-archive/file-hashes.tar.gz" ]; then
-              echo "📥 Restoring Nx file hashes..."
-              tar -xzf .nx-cache-archive/file-hashes.tar.gz -C / || echo "⚠️ Failed to extract file hashes"
-            fi
-            echo "✅ Nx cache restore complete"
-          else
-            echo "ℹ️ No high-value cache to restore"
-          fi
-
-      - name: 💾 Regular Nx Cache
-        id: nx-regular-cache
-        uses: actions/cache@v4
-        with:
-          path: .nx/cache
-          key: ${{ steps.generate-cache-keys.outputs.nx-key }}
-          restore-keys: |
-            ${{ inputs.cache-version }}-node${{ inputs.node-version }}-nx-
-
-      - name: 📤 Archive high-value Nx cache
-        if: always()
-        run: |
-          echo "🔄 Archiving high-value Nx cache data for future runs..."
-          mkdir -p .nx-cache-archive
-          
-          if [ -d ".nx/cache" ]; then
-            # Archive computation cache results (most valuable for performance)
-            echo "📦 Archiving computation cache..."
-            find .nx/cache -path "*/computation" -type d | xargs tar -czf .nx-cache-archive/computation-cache.tar.gz --ignore-failed-read 2>/dev/null || echo "ℹ️ No computation cache to archive"
-          
-            # Archive file hashes to save time on file hashing
-            echo "📦 Archiving file hashes..."
-            find .nx/cache -name "file-map.json*" | xargs tar -czf .nx-cache-archive/file-hashes.tar.gz --ignore-failed-read 2>/dev/null || echo "ℹ️ No file hashes to archive"
-          
-            echo "✅ Cache archiving complete"
-          else
-            echo "ℹ️ No Nx cache found to archive"
-          fi
-
       - name: 📊 Environment Dashboard
         run: |
           echo "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"
@@ -262,15 +214,10 @@ jobs:
           echo "┃                                                                               ┃"
           echo "┃  💾 Cache Status:                                                             ┃"
           DEPS_CACHE_STATUS="${{ steps.cache-deps.outputs.cache-hit == 'true' && '✅ Hit' || '❌ Miss' }}"
-          NX_HVC_STATUS="${{ steps.nx-high-value-cache.outputs.cache-hit == 'true' && '✅ Hit' || '❌ Miss' }}"
-          NX_CACHE_STATUS="${{ steps.nx-regular-cache.outputs.cache-hit == 'true' && '✅ Hit' || '❌ Miss' }}"
           echo "┃  • Dependencies: $DEPS_CACHE_STATUS                                           "
-          echo "┃  • Nx High-Value: $NX_HVC_STATUS                                              "
-          echo "┃  • Nx Regular: $NX_CACHE_STATUS                                               "
           echo "┃                                                                               ┃"
           echo "┃  🔑 Cache Keys:                                                               ┃"
           echo "┃  • PNPM: ${{ steps.generate-cache-keys.outputs.pnpm-key }}                    "
-          echo "┃  • Nx: ${{ steps.generate-cache-keys.outputs.nx-key }}                        "
           echo "┃                                                                               ┃"
           echo "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"
           
@@ -285,6 +232,4 @@ jobs:
           echo "### 💾 Cache Status" >> $GITHUB_STEP_SUMMARY
           echo "| Cache Type | Status | Key |" >> $GITHUB_STEP_SUMMARY
           echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
-          echo "| Dependencies | $DEPS_CACHE_STATUS | \`${{ steps.generate-cache-keys.outputs.pnpm-key }}\` |" >> $GITHUB_STEP_SUMMARY
-          echo "| Nx High-Value | $NX_HVC_STATUS | \`${{ steps.generate-cache-keys.outputs.nx-key }}-hvc\` |" >> $GITHUB_STEP_SUMMARY
-          echo "| Nx Regular | $NX_CACHE_STATUS | \`${{ steps.generate-cache-keys.outputs.nx-key }}\` |" >> $GITHUB_STEP_SUMMARY
\ No newline at end of file
+          echo "| Dependencies | $DEPS_CACHE_STATUS | \`${{ steps.generate-cache-keys.outputs.pnpm-key }}\` |" >> $GITHUB_STEP_SUMMARY
\ No newline at end of file
diff --git a/.github/workflows/lib/test.yml b/.github/workflows/lib/test.yml
new file mode 100644
index 0000000..53baa55
--- /dev/null
+++ b/.github/workflows/lib/test.yml
@@ -0,0 +1,117 @@
+name: 🏗️ Build the Application
+
+on:
+  workflow_call:
+    inputs:
+      pnpm-cache-key:
+        description: "The generated pnpm cache key"
+        required: true
+        type: string
+      node-version:
+        description: "Node.js version"
+        required: false
+        default: "22"
+        type: string
+      pnpm-version:
+        description: "pnpm version"
+        required: false
+        default: "10.6.4"
+        type: string
+      run-affected:
+        description: "Run affected commands"
+        required: false
+        default: true
+        type: boolean
+      upload-coverage:
+        description: "Upload coverage to Codecov"
+        required: false
+        default: true
+        type: boolean
+    secrets:
+      NX_CLOUD_ACCESS_TOKEN:
+        description: "Nx Cloud access token"
+        required: true
+    outputs:
+      summary:
+        description: "Build summary"
+        value: ${{ jobs.build.outputs.summary }}
+
+jobs:
+  build:
+    name:  🧪Test
+    runs-on: ubuntu-latest
+    env:
+      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
+    outputs:
+      summary: ${{ steps.test-summary.outputs.summary }}
+    steps:
+      - name: 📥 Checkout repository
+        uses: actions/checkout@v4
+        with:
+          fetch-depth: 0
+
+      - name: 🧮 Calculate Nx Base and Head
+        if: ${{ inputs.run-affected == true }}
+        uses: nrwl/nx-set-shas@v4
+        with:
+          main-branch-name: 'main'
+
+      - name: 📦 Setup pnpm
+        uses: pnpm/action-setup@v2
+        with:
+          version: ${{ inputs.pnpm-version }}
+
+      - name: 🟢 Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: ${{ inputs.node-version }}
+          cache: 'pnpm'
+
+      - name: 📚 Restore dependency cache
+        id: cache-deps
+        uses: actions/cache@v4
+        with:
+          path: |
+            node_modules
+            */*/node_modules
+          key: ${{ inputs.pnpm-cache-key }}
+
+      - name: 📥 Install dependencies
+        if: steps.cache-deps.outputs.cache-hit != 'true'
+        run: |
+          echo "🔄 Cache miss - Installing dependencies..."
+          pnpm install --frozen-lockfile
+          echo "✅ Dependencies installed successfully"     
+
+      # Run tests with the SHAs set by nx-set-shas
+      - name: 🧪 Run affected tests
+        if: ${{ inputs.run-affected == true }}
+        run: |
+          echo "🔍 Running tests on affected projects..."
+          echo "Using base: $NX_BASE"
+          echo "Using head: $NX_HEAD"
+
+          pnpm nx affected --target=test
+          echo "✅ Tests completed successfully"
+
+      # Runs all tests
+      - name: 🧪 Run all tests
+        if: ${{ inputs.run-affected == false }}
+        run: |
+          echo "🔍 Running tests on all projects..."
+          
+          pnpm nx run-many --target=test --parallel=3
+          echo "✅ Tests completed successfully"    
+
+      - name: 📊 Test Summary
+        if: always()
+        run: |
+          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
+          echo "" >> $GITHUB_STEP_SUMMARY
+
+          if [ ${{ job.status }} == 'success' ]; then
+            echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
+          else
+            echo "❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
+          fi
+          echo "summary=$GITHUB_STEP_SUMMARY" >> $GITHUB_STEP_SUMMARY
\ No newline at end of file
diff --git a/.husky/commit-msg b/.husky/commit-msg
index 8fe1e0a..072421a 100644
--- a/.husky/commit-msg
+++ b/.husky/commit-msg
@@ -1 +1,9 @@
-npx --no -- commitlint --edit ${1}
\ No newline at end of file
+echo "📝 Validating commit message..."
+
+if npx --no -- commitlint --edit "$1"; then
+  echo "✅ Commit message passed linting."
+else
+  echo "❌ Commit message failed linting. Please follow conventional commit format."
+  echo "📘 Examples: 'feat: add login form', 'fix: correct input validation'"
+  exit 1
+fi
diff --git a/.husky/pre-commit b/.husky/pre-commit
index fd7ef7a..49cc40e 100644
--- a/.husky/pre-commit
+++ b/.husky/pre-commit
@@ -1 +1,4 @@
-pnpm lint && pnpm test && pnpm build
+# Run lint, test, and build on affected projects in parallel
+echo "🔍 Running lint, test, and build on affected projects..."
+
+pnpm nx affected -t lint test build --parallel=3
\ No newline at end of file
diff --git a/.husky/pre-push b/.husky/pre-push
new file mode 100644
index 0000000..7da5ca5
--- /dev/null
+++ b/.husky/pre-push
@@ -0,0 +1,8 @@
+BRANCH_NAME="$(git symbolic-ref --short HEAD)"
+
+if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "development" ]; then
+  echo "✅ Skipping branch name validation for '$BRANCH_NAME'"
+else
+  echo "🔍 Validating branch name for '$BRANCH_NAME'"
+  pnpm validate-branch-name
+fi
diff --git a/.validate-branch-namerc.json b/.validate-branch-namerc.json
new file mode 100644
index 0000000..d1608bc
--- /dev/null
+++ b/.validate-branch-namerc.json
@@ -0,0 +1,4 @@
+{
+  "pattern": "^(feature|fix|docs|style|refactor|test|chore)/.+$",
+  "errorMsg": "Branch name does not follow the conventional commit format. Expected format: <type>/<description>"
+}
\ No newline at end of file
diff --git a/nx.json b/nx.json
index 0f26d6b..edbb75b 100644
--- a/nx.json
+++ b/nx.json
@@ -50,11 +50,30 @@
     }
   ],
   "release": {
+    "projects": ["packages/*"],
+    "projectsRelationship": "independent",
     "version": {
-      "preVersionCommand": "pnpm dlx nx run-many -t build"
+      "preVersionCommand": "npx nx run-many -t build",
+      "conventionalCommits": true
+    },
+    "changelog": {
+      "projectChangelogs": {
+        "renderOptions": {
+          "authors": true,
+          "mapAuthorsToGitHubUsernames": true,
+          "commitReferences": true,
+          "versionTitleDate": true,
+          "tagFormat": "@alienfishconsulting/{projectName}@{version}"
+        }
+      }
     }
   },
   "targetDefaults": {
+    "nx-release-publish": {
+      "options": {
+        "packageRoot": "dist/packages/{projectName}"
+      }
+    },
     "test": {
       "dependsOn": ["^build"]
     },
diff --git a/package.json b/package.json
index a3c8b54..aebc12b 100644
--- a/package.json
+++ b/package.json
@@ -6,15 +6,12 @@
     "prepare": "husky",
     "nx:reset": "nx reset",
     "nx:new-package": "nx generate @alienfishconsulting/alienfish-core:new-package",
-    "coverage:clean": "find . -type d -name coverage -exec rm -rf {} +",
     "build": "nx affected -t build",
     "test": "nx affected -t test",
     "lint": "nx affected -t lint",
     "clean": "nx reset && rm -rf node_modules",
-    "changeset": "changeset",
-    "version": "changeset version",
-    "publish": "changeset publish",
-    "commit": "cz"
+    "commit": "cz",
+    "init": "pnpm exec bash ./tools/scripts/init.sh"
   },
   "devDependencies": {
     "@changesets/cli": "2.28.1",
@@ -42,12 +39,14 @@
     "jiti": "2.4.2",
     "jsdom": "~22.1.0",
     "jsonc-eslint-parser": "^2.1.0",
+    "npm-run-all": "4.1.5",
     "nx": "20.7.1",
     "prettier": "^2.6.2",
     "tslib": "^2.3.0",
     "tsup": "^8.4.0",
     "typescript": "~5.7.2",
     "typescript-eslint": "^8.19.0",
+    "validate-branch-name": "1.3.2",
     "verdaccio": "^6.0.5",
     "vite": "^6.0.0",
     "vite-plugin-dts": "~4.5.0",
diff --git a/packages/core-context/src/index.ts b/packages/core-context/src/index.ts
index 3156ae3..b490940 100644
--- a/packages/core-context/src/index.ts
+++ b/packages/core-context/src/index.ts
@@ -6,4 +6,4 @@
 export * from './types.js';
 export * from './accessors.js';
 export * from './lifecycle.js';
-export * from './headers.js';
+export * from './headers.js';
\ No newline at end of file
diff --git a/pnpm-lock.yaml b/pnpm-lock.yaml
index d53a79f..0cd8c5b 100644
--- a/pnpm-lock.yaml
+++ b/pnpm-lock.yaml
@@ -87,6 +87,9 @@ importers:
       jsonc-eslint-parser:
         specifier: ^2.1.0
         version: 2.4.0
+      npm-run-all:
+        specifier: 4.1.5
+        version: 4.1.5
       nx:
         specifier: 20.7.1
         version: 20.7.1(@swc-node/register@1.9.2(@swc/core@1.5.29(@swc/helpers@0.5.15))(@swc/types@0.1.21)(typescript@5.7.3))(@swc/core@1.5.29(@swc/helpers@0.5.15))
@@ -105,6 +108,9 @@ importers:
       typescript-eslint:
         specifier: ^8.19.0
         version: 8.29.0(eslint@9.23.0(jiti@2.4.2))(typescript@5.7.3)
+      validate-branch-name:
+        specifier: 1.3.2
+        version: 1.3.2(typescript@5.7.3)
       verdaccio:
         specifier: ^6.0.5
         version: 6.1.2(encoding@0.1.13)(typanion@3.14.0)
@@ -2156,6 +2162,10 @@ packages:
   argparse@2.0.1:
     resolution: {integrity: sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==}
 
+  array-buffer-byte-length@1.0.2:
+    resolution: {integrity: sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==}
+    engines: {node: '>= 0.4'}
+
   array-flatten@1.1.1:
     resolution: {integrity: sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==}
 
@@ -2166,6 +2176,10 @@ packages:
     resolution: {integrity: sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==}
     engines: {node: '>=8'}
 
+  arraybuffer.prototype.slice@1.0.4:
+    resolution: {integrity: sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==}
+    engines: {node: '>= 0.4'}
+
   asn1@0.2.6:
     resolution: {integrity: sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==}
 
@@ -2177,6 +2191,10 @@ packages:
     resolution: {integrity: sha512-Izi8RQcffqCeNVgFigKli1ssklIbpHnCYc6AknXGYoB6grJqyeby7jv12JUQgmTAnIDnbck1uxksT4dzN3PWBA==}
     engines: {node: '>=12'}
 
+  async-function@1.0.0:
+    resolution: {integrity: sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==}
+    engines: {node: '>= 0.4'}
+
   async@3.2.4:
     resolution: {integrity: sha512-iAB+JbDEGXhyIUavoDl9WP/Jj106Kz9DEn1DPgYw5ruDn0e3Wgi3sKFm55sASdGBNOQB8F59d9qQ7deqrHA8wQ==}
 
@@ -2194,6 +2212,10 @@ packages:
     resolution: {integrity: sha512-kNOjDqAh7px0XWNI+4QbzoiR/nTkHAWNud2uvnJquD1/x5a7EQZMJT0AczqK0Qn67oY/TTQ1LbUKajZpp3I9tQ==}
     engines: {node: '>=8.0.0'}
 
+  available-typed-arrays@1.0.7:
+    resolution: {integrity: sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==}
+    engines: {node: '>= 0.4'}
+
   aws-sign2@0.7.0:
     resolution: {integrity: sha512-08kcGqnYf/YmjoRhfxyu+CLxBjUtHLXLXX/vUfx9l2LYzG3c1m61nrpyFUZI6zeS+Li/wWMMidD9KgrqtGq3mA==}
 
@@ -2368,6 +2390,10 @@ packages:
     resolution: {integrity: sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==}
     engines: {node: '>= 0.4'}
 
+  call-bind@1.0.8:
+    resolution: {integrity: sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==}
+    engines: {node: '>= 0.4'}
+
   call-bound@1.0.4:
     resolution: {integrity: sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==}
     engines: {node: '>= 0.4'}
@@ -2601,6 +2627,15 @@ packages:
     resolution: {integrity: sha512-AdmX6xUzdNASswsFtmwSt7Vj8po9IuqXm0UXz7QKPuEUmPB4XyjGfaAr2PSuELMwkRMVH1EpIkX5bTZGRB3eCA==}
     engines: {node: '>=10'}
 
+  cosmiconfig@8.3.6:
+    resolution: {integrity: sha512-kcZ6+W5QzcJ3P1Mt+83OUv/oHFqZHIx8DuxG6eZ5RGMERoLqp4BuGjhHLYGK+Kf5XVkQvqBSmAy/nGWN3qDgEA==}
+    engines: {node: '>=14'}
+    peerDependencies:
+      typescript: '>=4.9.5'
+    peerDependenciesMeta:
+      typescript:
+        optional: true
+
   cosmiconfig@9.0.0:
     resolution: {integrity: sha512-itvL5h8RETACmOTFc4UfIyB2RfEHi71Ax6E/PivVxq9NseKbOWpeyHEOIbmAw1rs8Ak0VursQNww7lf7YtUwzg==}
     engines: {node: '>=14'}
@@ -2610,6 +2645,10 @@ packages:
       typescript:
         optional: true
 
+  cross-spawn@6.0.6:
+    resolution: {integrity: sha512-VqCUuhcd1iB+dsv8gxPttb5iZh/D0iubSP21g36KXdEuf6I5JiioesUVjpCdHV9MZRUfVFlvwtIUyPfxo5trtw==}
+    engines: {node: '>=4.8'}
+
   cross-spawn@7.0.6:
     resolution: {integrity: sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==}
     engines: {node: '>= 8'}
@@ -2634,6 +2673,18 @@ packages:
     resolution: {integrity: sha512-/mMTei/JXPqvFqQtfyTowxmJVwr2PVAeCcDxyFf6LhoOu/09TX2OX3kb2wzi4DMXcfj4OItwDOnhl5oziPnT6g==}
     engines: {node: '>=14'}
 
+  data-view-buffer@1.0.2:
+    resolution: {integrity: sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==}
+    engines: {node: '>= 0.4'}
+
+  data-view-byte-length@1.0.2:
+    resolution: {integrity: sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==}
+    engines: {node: '>= 0.4'}
+
+  data-view-byte-offset@1.0.1:
+    resolution: {integrity: sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==}
+    engines: {node: '>= 0.4'}
+
   dayjs@1.11.13:
     resolution: {integrity: sha512-oaMBel6gjolK862uaPQOVTA7q3TZhuSvuMQAAglQDOWYO9A91IrAOUJEyKVlqJlHE0vq5p5UXxzdPfMH/x6xNg==}
 
@@ -2706,10 +2757,18 @@ packages:
     resolution: {integrity: sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==}
     engines: {node: '>=10'}
 
+  define-data-property@1.1.4:
+    resolution: {integrity: sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==}
+    engines: {node: '>= 0.4'}
+
   define-lazy-prop@2.0.0:
     resolution: {integrity: sha512-Ds09qNh8yw3khSjiJjiUInaGX9xlqZDY7JVryGxdxV7NPeuqQfplOpQ66yJFZut3jLa5zOwkXw1g9EI2uKh4Og==}
     engines: {node: '>=8'}
 
+  define-properties@1.2.1:
+    resolution: {integrity: sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==}
+    engines: {node: '>= 0.4'}
+
   delayed-stream@1.0.0:
     resolution: {integrity: sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==}
     engines: {node: '>=0.4.0'}
@@ -2843,6 +2902,10 @@ packages:
   error-ex@1.3.2:
     resolution: {integrity: sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==}
 
+  es-abstract@1.23.9:
+    resolution: {integrity: sha512-py07lI0wjxAC/DcfK1S6G7iANonniZwTISvdPzk9hzeH0IZIshbuuFxLIU96OyF89Yb9hiqWn8M/bY83KY5vzA==}
+    engines: {node: '>= 0.4'}
+
   es-define-property@1.0.1:
     resolution: {integrity: sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==}
     engines: {node: '>= 0.4'}
@@ -2862,6 +2925,10 @@ packages:
     resolution: {integrity: sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==}
     engines: {node: '>= 0.4'}
 
+  es-to-primitive@1.3.0:
+    resolution: {integrity: sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==}
+    engines: {node: '>= 0.4'}
+
   esbuild@0.25.2:
     resolution: {integrity: sha512-16854zccKPnC+toMywC+uKNeYSv+/eXkevRAfwRD/G9Cleq66m8XFIrigkbvauLLlCfDL45Q2cWegSg53gGBnQ==}
     engines: {node: '>=18'}
@@ -3151,6 +3218,10 @@ packages:
       debug:
         optional: true
 
+  for-each@0.3.5:
+    resolution: {integrity: sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==}
+    engines: {node: '>= 0.4'}
+
   foreground-child@3.3.1:
     resolution: {integrity: sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==}
     engines: {node: '>=14'}
@@ -3207,6 +3278,13 @@ packages:
   function-bind@1.1.2:
     resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}
 
+  function.prototype.name@1.1.8:
+    resolution: {integrity: sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==}
+    engines: {node: '>= 0.4'}
+
+  functions-have-names@1.2.3:
+    resolution: {integrity: sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==}
+
   gensync@1.0.0-beta.2:
     resolution: {integrity: sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==}
     engines: {node: '>=6.9.0'}
@@ -3235,9 +3313,17 @@ packages:
     resolution: {integrity: sha512-kVCxPF3vQM/N0B1PmoqVUqgHP+EeVjmZSQn+1oCRPxd2P21P2F19lIgbR3HBosbB1PUhOAoctJnfEn2GbN2eZA==}
     engines: {node: '>=18'}
 
+  get-symbol-description@1.1.0:
+    resolution: {integrity: sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==}
+    engines: {node: '>= 0.4'}
+
   getpass@0.1.7:
     resolution: {integrity: sha512-0fzj9JxOLfJ+XGLhR8ze3unN0KZCgZwiSSDz168VERjK8Wl8kVSdcu2kspd4s4wtAa1y/qrVRiAA0WclVsu0ng==}
 
+  git-local-info@1.0.1:
+    resolution: {integrity: sha512-QdCZytNlj9xHoyCXgqOOVYuxuq8Vo8fm3sDobpDrp59D4fa0wZ5f1huR49/qbxkzIdnJAA1tUIO68DkrvVa6Sg==}
+    engines: {node: '>= 4.0'}
+
   git-raw-commits@4.0.0:
     resolution: {integrity: sha512-ICsMM1Wk8xSGMowkOmPrzo2Fgmfo4bMHLNX6ytHjajRJUqvHOw/TFapQ+QG75c3X/tTDDhOSRPGC52dDbNM8FQ==}
     engines: {node: '>=16'}
@@ -3287,6 +3373,10 @@ packages:
     resolution: {integrity: sha512-7ACyT3wmyp3I61S4fG682L0VA2RGD9otkqGJIwNUMF1SWUombIIk+af1unuDYgMm082aHYwD+mzJvv9Iu8dsgg==}
     engines: {node: '>=18'}
 
+  globalthis@1.0.4:
+    resolution: {integrity: sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==}
+    engines: {node: '>= 0.4'}
+
   globby@11.1.0:
     resolution: {integrity: sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==}
     engines: {node: '>=10'}
@@ -3317,6 +3407,10 @@ packages:
   harmony-reflect@1.6.2:
     resolution: {integrity: sha512-HIp/n38R9kQjDEziXyDTuW3vvoxxyxjxFzXLrBr18uB47GnSt+G9D29fqrpM5ZkspMcPICud3XsBJQ4Y2URg8g==}
 
+  has-bigints@1.1.0:
+    resolution: {integrity: sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==}
+    engines: {node: '>= 0.4'}
+
   has-flag@3.0.0:
     resolution: {integrity: sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==}
     engines: {node: '>=4'}
@@ -3325,6 +3419,13 @@ packages:
     resolution: {integrity: sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==}
     engines: {node: '>=8'}
 
+  has-property-descriptors@1.0.2:
+    resolution: {integrity: sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==}
+
+  has-proto@1.2.0:
+    resolution: {integrity: sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==}
+    engines: {node: '>= 0.4'}
+
   has-symbols@1.1.0:
     resolution: {integrity: sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==}
     engines: {node: '>= 0.4'}
@@ -3345,6 +3446,9 @@ packages:
     resolution: {integrity: sha512-eSmmWE5bZTK2Nou4g0AI3zZ9rswp7GRKoKXS1BLUkvPviOqs4YTN1djQIqrXy9k5gEtdLPy86JjRwsNM9tnDcA==}
     engines: {node: '>=0.10.0'}
 
+  hosted-git-info@2.8.9:
+    resolution: {integrity: sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==}
+
   hosted-git-info@7.0.2:
     resolution: {integrity: sha512-puUZAUKT5m8Zzvs72XWy3HtvVbTWljRE66cP60bxJzAqf2DgICo7lYTY2IHUmLnNpjYvw5bvmoHvPc0QO2a62w==}
     engines: {node: ^16.14.0 || >=18.0.0}
@@ -3462,17 +3566,49 @@ packages:
   inspect-with-kind@1.0.5:
     resolution: {integrity: sha512-MAQUJuIo7Xqk8EVNP+6d3CKq9c80hi4tjIbIAT6lmGW9W6WzlHiu9PS8uSuUYU+Do+j1baiFp3H25XEVxDIG2g==}
 
+  internal-slot@1.1.0:
+    resolution: {integrity: sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==}
+    engines: {node: '>= 0.4'}
+
   ipaddr.js@1.9.1:
     resolution: {integrity: sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==}
     engines: {node: '>= 0.10'}
 
+  is-array-buffer@3.0.5:
+    resolution: {integrity: sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==}
+    engines: {node: '>= 0.4'}
+
   is-arrayish@0.2.1:
     resolution: {integrity: sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==}
 
+  is-async-function@2.1.1:
+    resolution: {integrity: sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==}
+    engines: {node: '>= 0.4'}
+
+  is-bigint@1.1.0:
+    resolution: {integrity: sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==}
+    engines: {node: '>= 0.4'}
+
+  is-boolean-object@1.2.2:
+    resolution: {integrity: sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==}
+    engines: {node: '>= 0.4'}
+
+  is-callable@1.2.7:
+    resolution: {integrity: sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==}
+    engines: {node: '>= 0.4'}
+
   is-core-module@2.16.1:
     resolution: {integrity: sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==}
     engines: {node: '>= 0.4'}
 
+  is-data-view@1.0.2:
+    resolution: {integrity: sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==}
+    engines: {node: '>= 0.4'}
+
+  is-date-object@1.1.0:
+    resolution: {integrity: sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==}
+    engines: {node: '>= 0.4'}
+
   is-deflate@1.0.0:
     resolution: {integrity: sha512-YDoFpuZWu1VRXlsnlYMzKyVRITXj7Ej/V9gXQ2/pAe7X1J7M/RNOqaIYi6qUn+B7nGyB9pDXrv02dsB58d2ZAQ==}
 
@@ -3485,6 +3621,10 @@ packages:
     resolution: {integrity: sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==}
     engines: {node: '>=0.10.0'}
 
+  is-finalizationregistry@1.1.1:
+    resolution: {integrity: sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==}
+    engines: {node: '>= 0.4'}
+
   is-fullwidth-code-point@3.0.0:
     resolution: {integrity: sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==}
     engines: {node: '>=8'}
@@ -3493,6 +3633,10 @@ packages:
     resolution: {integrity: sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==}
     engines: {node: '>=6'}
 
+  is-generator-function@1.1.0:
+    resolution: {integrity: sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==}
+    engines: {node: '>= 0.4'}
+
   is-glob@4.0.3:
     resolution: {integrity: sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==}
     engines: {node: '>=0.10.0'}
@@ -3505,6 +3649,14 @@ packages:
     resolution: {integrity: sha512-2HvIEKRoqS62guEC+qBjpvRubdX910WCMuJTZ+I9yvqKU2/12eSL549HMwtabb4oupdj2sMP50k+XJfB/8JE6w==}
     engines: {node: '>=8'}
 
+  is-map@2.0.3:
+    resolution: {integrity: sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==}
+    engines: {node: '>= 0.4'}
+
+  is-number-object@1.1.1:
+    resolution: {integrity: sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==}
+    engines: {node: '>= 0.4'}
+
   is-number@7.0.0:
     resolution: {integrity: sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==}
     engines: {node: '>=0.12.0'}
@@ -3527,6 +3679,18 @@ packages:
   is-promise@2.2.2:
     resolution: {integrity: sha512-+lP4/6lKUBfQjZ2pdxThZvLUAafmZb8OAxFb8XXtiQmS35INgr85hdOGoEs124ez1FCnZJt6jau/T+alh58QFQ==}
 
+  is-regex@1.2.1:
+    resolution: {integrity: sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==}
+    engines: {node: '>= 0.4'}
+
+  is-set@2.0.3:
+    resolution: {integrity: sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==}
+    engines: {node: '>= 0.4'}
+
+  is-shared-array-buffer@1.0.4:
+    resolution: {integrity: sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==}
+    engines: {node: '>= 0.4'}
+
   is-stream@2.0.1:
     resolution: {integrity: sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==}
     engines: {node: '>=8'}
@@ -3535,14 +3699,26 @@ packages:
     resolution: {integrity: sha512-Dnz92NInDqYckGEUJv689RbRiTSEHCQ7wOVeALbkOz999YpqT46yMRIGtSNl2iCL1waAZSx40+h59NV/EwzV/A==}
     engines: {node: '>=18'}
 
+  is-string@1.1.1:
+    resolution: {integrity: sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==}
+    engines: {node: '>= 0.4'}
+
   is-subdir@1.2.0:
     resolution: {integrity: sha512-2AT6j+gXe/1ueqbW6fLZJiIw3F8iXGJtt0yDrZaBhAZEG1raiTxKWU+IPqMCzQAXOUCKdA4UDMgacKH25XG2Cw==}
     engines: {node: '>=4'}
 
+  is-symbol@1.1.1:
+    resolution: {integrity: sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==}
+    engines: {node: '>= 0.4'}
+
   is-text-path@2.0.0:
     resolution: {integrity: sha512-+oDTluR6WEjdXEJMnC2z6A4FRwFoYuvShVVEGsS7ewc0UTi2QtAKMDJuL4BDEVt+5T7MjFo12RP8ghOM75oKJw==}
     engines: {node: '>=8'}
 
+  is-typed-array@1.1.15:
+    resolution: {integrity: sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==}
+    engines: {node: '>= 0.4'}
+
   is-typedarray@1.0.0:
     resolution: {integrity: sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==}
 
@@ -3553,6 +3729,18 @@ packages:
   is-utf8@0.2.1:
     resolution: {integrity: sha512-rMYPYvCzsXywIsldgLaSoPlw5PfoB/ssr7hY4pLfcodrA5M/eArza1a9VmTiNIBNMjOGr1Ow9mTyU2o69U6U9Q==}
 
+  is-weakmap@2.0.2:
+    resolution: {integrity: sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==}
+    engines: {node: '>= 0.4'}
+
+  is-weakref@1.1.1:
+    resolution: {integrity: sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==}
+    engines: {node: '>= 0.4'}
+
+  is-weakset@2.0.4:
+    resolution: {integrity: sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==}
+    engines: {node: '>= 0.4'}
+
   is-windows@1.0.2:
     resolution: {integrity: sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==}
     engines: {node: '>=0.10.0'}
@@ -3564,6 +3752,9 @@ packages:
   isarray@1.0.0:
     resolution: {integrity: sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==}
 
+  isarray@2.0.5:
+    resolution: {integrity: sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==}
+
   isexe@2.0.0:
     resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}
 
@@ -3754,6 +3945,9 @@ packages:
   json-buffer@3.0.1:
     resolution: {integrity: sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==}
 
+  json-parse-better-errors@1.0.2:
+    resolution: {integrity: sha512-mrqyZKfX5EhL7hvqcV6WG1yYjnjeuYDzDhhcAAUrq8Po85NBQBJP+ZDUT75qZQ98IkUoBqdkExkukOU7Ts2wrw==}
+
   json-parse-even-better-errors@2.3.1:
     resolution: {integrity: sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==}
 
@@ -3837,6 +4031,10 @@ packages:
     resolution: {integrity: sha512-cNOjgCnLB+FnvWWtyRTzmB3POJ+cXxTA81LoW7u8JdmhfXzriropYwpjShnz1QLLWsQwY7nIxoDmcPTwphDK9w==}
     engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}
 
+  load-json-file@4.0.0:
+    resolution: {integrity: sha512-Kx8hMakjX03tiGTLAIdJ+lL0htKnXjEZN6hk/tozf/WOuYGdZBJrZ+rCJRbVCugsjB3jMLn9746NsQIf5VjBMw==}
+    engines: {node: '>=4'}
+
   load-tsconfig@0.2.5:
     resolution: {integrity: sha512-IXO6OCs9yg8tMKzfPZ1YmheJbZCiEsnBdcB03l0OcfK9prKnJb96siuHCr5Fl37/yo9DnKU+TLpxzTUspw9shg==}
     engines: {node: ^12.20.0 || ^14.13.1 || >=16.0.0}
@@ -3971,6 +4169,10 @@ packages:
     resolution: {integrity: sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==}
     engines: {node: '>= 0.6'}
 
+  memorystream@0.3.1:
+    resolution: {integrity: sha512-S3UwM3yj5mtUSEfP41UZmt/0SCoVYUcU1rkXv+BQ5Ig8ndL4sPoJNBUJERafdPb5jjHJGuMgytgKvKIf58XNBw==}
+    engines: {node: '>= 0.10.0'}
+
   meow@12.1.1:
     resolution: {integrity: sha512-BhXM0Au22RwUneMPwSCnyhTOizdWoIEPU9sp0Aqa1PnDMR5Wv2FGXYDjuzJEIX+Eo2Rb8xuYe5jrnm5QowQFkw==}
     engines: {node: '>=16.10'}
@@ -4116,6 +4318,9 @@ packages:
   neo-async@2.6.2:
     resolution: {integrity: sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==}
 
+  nice-try@1.0.5:
+    resolution: {integrity: sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==}
+
   node-fetch@2.6.7:
     resolution: {integrity: sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==}
     engines: {node: 4.x || >=6.0.0}
@@ -4134,6 +4339,9 @@ packages:
   node-releases@2.0.19:
     resolution: {integrity: sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==}
 
+  normalize-package-data@2.5.0:
+    resolution: {integrity: sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==}
+
   normalize-path@3.0.0:
     resolution: {integrity: sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==}
     engines: {node: '>=0.10.0'}
@@ -4146,6 +4354,11 @@ packages:
     resolution: {integrity: sha512-M7s1BD4NxdAvBKUPqqRW957Xwcl/4Zvo8Aj+ANrzvIPzGJZElrH7Z//rSaec2ORcND6FHHLnZeY8qgTpXDMFQQ==}
     engines: {node: ^16.14.0 || >=18.0.0}
 
+  npm-run-all@4.1.5:
+    resolution: {integrity: sha512-Oo82gJDAVcaMdi3nuoKFavkIHBRVqQ1qvMb+9LHk/cF4P6B2m8aP04hGf7oL6wZ9BuGwX1onlLhpuoofSyoQDQ==}
+    engines: {node: '>= 4'}
+    hasBin: true
+
   npm-run-path@4.0.1:
     resolution: {integrity: sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==}
     engines: {node: '>=8'}
@@ -4173,6 +4386,14 @@ packages:
     resolution: {integrity: sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==}
     engines: {node: '>= 0.4'}
 
+  object-keys@1.1.1:
+    resolution: {integrity: sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==}
+    engines: {node: '>= 0.4'}
+
+  object.assign@4.1.7:
+    resolution: {integrity: sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==}
+    engines: {node: '>= 0.4'}
+
   on-exit-leak-free@2.1.2:
     resolution: {integrity: sha512-0eJJY6hXLGf1udHwfNftBqH+g73EU4B504nZeKpz1sYRKafAghwxEJunB2O7rDZkL4PGfsMVnTXZ2EjibbqcsA==}
     engines: {node: '>=14.0.0'}
@@ -4219,6 +4440,10 @@ packages:
   outdent@0.5.0:
     resolution: {integrity: sha512-/jHxFIzoMXdqPzTaCpFzAAWhpkSjZPF4Vsn6jAfNpmbH/ymsmd7Qc6VE9BGn0L6YMj6uwpQLxCECpus4ukKS9Q==}
 
+  own-keys@1.0.1:
+    resolution: {integrity: sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==}
+    engines: {node: '>= 0.4'}
+
   p-cancelable@3.0.0:
     resolution: {integrity: sha512-mlVgR3PGuzlo0MmTdk4cXqXWlwQDLnONTAg6sm62XkMJEiRxN3GL3SffkYvqwonbkJBcrI7Uvv5Zh9yjvn2iUw==}
     engines: {node: '>=12.20'}
@@ -4272,6 +4497,10 @@ packages:
     resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
     engines: {node: '>=6'}
 
+  parse-json@4.0.0:
+    resolution: {integrity: sha512-aOIos8bujGN93/8Ox/jPLh7RwVnPEysynVFE+fQZyg6jKELEHwzgKdLRFHUgXJL6kylijVSBC4BvN9OmsB48Rw==}
+    engines: {node: '>=4'}
+
   parse-json@5.2.0:
     resolution: {integrity: sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==}
     engines: {node: '>=8'}
@@ -4302,6 +4531,10 @@ packages:
     resolution: {integrity: sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==}
     engines: {node: '>=0.10.0'}
 
+  path-key@2.0.1:
+    resolution: {integrity: sha512-fEHGKCSmUSDPv4uoj8AlD+joPlq3peND+HRYyxFz4KPw4z926S/b8rIuFs2FYJg3BwsxJf6A9/3eIdLaYC+9Dw==}
+    engines: {node: '>=4'}
+
   path-key@3.1.1:
     resolution: {integrity: sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==}
     engines: {node: '>=8'}
@@ -4316,6 +4549,10 @@ packages:
   path-to-regexp@0.1.12:
     resolution: {integrity: sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==}
 
+  path-type@3.0.0:
+    resolution: {integrity: sha512-T2ZUsdZFHgA3u4e5PfPbjd7HDDpxPnQb5jN0SrDsjNSuVXHJqtwTnWqG0B1jZrgmJ/7lj1EmVIByWt1gxGkWvg==}
+    engines: {node: '>=4'}
+
   path-type@4.0.0:
     resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
     engines: {node: '>=8'}
@@ -4351,6 +4588,11 @@ packages:
     resolution: {integrity: sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==}
     engines: {node: '>=12'}
 
+  pidtree@0.3.1:
+    resolution: {integrity: sha512-qQbW94hLHEqCg7nhby4yRC7G2+jYHY4Rguc2bjw7Uug4GIJuu1tvf2uHaZv5Q8zdt+WKJ6qK1FOI6amaWUo5FA==}
+    engines: {node: '>=0.10'}
+    hasBin: true
+
   pify@3.0.0:
     resolution: {integrity: sha512-C3FsVNH1udSEX48gGX1xfvwTWfsYWj5U+8/uK15BGzIGrKoUpghX8hWZwa/OFnakBiiVNmBvemTJR5mcy7iPcg==}
     engines: {node: '>=4'}
@@ -4393,6 +4635,10 @@ packages:
     resolution: {integrity: sha512-73JaFg4NwYNAufDtS5FsFu/PdM49ahJrO1i44aCRsDWju1z5wuGDaqyFUQWR6aJoK2JPDWlaYYAGFNIGTSUHSw==}
     engines: {node: '>= 10.12'}
 
+  possible-typed-array-names@1.1.0:
+    resolution: {integrity: sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==}
+    engines: {node: '>= 0.4'}
+
   postcss-load-config@6.0.1:
     resolution: {integrity: sha512-oPtTM4oerL+UXmx+93ytZVN82RrlY/wPUV8IeDxFrzIjXOLF1pN+EmKPLbubvKHT2HC20xXsCAH2Z+CKV6Oz/g==}
     engines: {node: '>= 18'}
@@ -4503,6 +4749,10 @@ packages:
   react-is@18.3.1:
     resolution: {integrity: sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==}
 
+  read-pkg@3.0.0:
+    resolution: {integrity: sha512-BLq/cCO9two+lBgiTYNqD6GdtK8s4NpaWrl6/rCO9w0TUS8oJl7cmToOZfRYllKTISY6nt1U7jQ53brmKqY6BA==}
+    engines: {node: '>=4'}
+
   read-yaml-file@1.1.0:
     resolution: {integrity: sha512-VIMnQi/Z4HT2Fxuwg5KrY174U1VdUIASQVWXXyqtNRtxSr9IYkn1rsI6Tb6HsrHCmB7gVpNwX6JxPTHcH6IoTA==}
     engines: {node: '>=6'}
@@ -4526,6 +4776,10 @@ packages:
     resolution: {integrity: sha512-57frrGM/OCTLqLOAh0mhVA9VBMHd+9U7Zb2THMGdBUoZVOtGbJzjxsYGDJ3A9AYYCP4hn6y1TVbaOfzWtm5GFg==}
     engines: {node: '>= 12.13.0'}
 
+  reflect.getprototypeof@1.0.10:
+    resolution: {integrity: sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==}
+    engines: {node: '>= 0.4'}
+
   regenerate-unicode-properties@10.2.0:
     resolution: {integrity: sha512-DqHn3DwbmmPVzeKj9woBadqmXxLvQoQIwu7nopMc72ztvxVmVk2SBhSnx67zuye5TP+lJsb/TBQsjLKhnDf3MA==}
     engines: {node: '>=4'}
@@ -4539,6 +4793,10 @@ packages:
   regenerator-transform@0.15.2:
     resolution: {integrity: sha512-hfMp2BoF0qOk3uc5V20ALGDS2ddjQaLrdl7xrGXvAIow7qeWRM2VA2HuCHkUKk9slq3VwEwLNK3DFBqDfPGYtg==}
 
+  regexp.prototype.flags@1.5.4:
+    resolution: {integrity: sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==}
+    engines: {node: '>= 0.4'}
+
   regexpu-core@6.2.0:
     resolution: {integrity: sha512-H66BPQMrv+V16t8xtmq+UC0CBpiTBA60V8ibS1QVReIp8T1z8hwFxqcGzm9K6lgsN7sB5edVH8a+ze6Fqm4weA==}
     engines: {node: '>=4'}
@@ -4620,12 +4878,24 @@ packages:
   rxjs@7.8.2:
     resolution: {integrity: sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==}
 
+  safe-array-concat@1.1.3:
+    resolution: {integrity: sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==}
+    engines: {node: '>=0.4'}
+
   safe-buffer@5.1.2:
     resolution: {integrity: sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==}
 
   safe-buffer@5.2.1:
     resolution: {integrity: sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==}
 
+  safe-push-apply@1.0.0:
+    resolution: {integrity: sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==}
+    engines: {node: '>= 0.4'}
+
+  safe-regex-test@1.1.0:
+    resolution: {integrity: sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==}
+    engines: {node: '>= 0.4'}
+
   safe-stable-stringify@2.5.0:
     resolution: {integrity: sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==}
     engines: {node: '>=10'}
@@ -4652,6 +4922,10 @@ packages:
     resolution: {integrity: sha512-LJWA9kSvMolR51oDE6PN3kALBNaUdkxzAGcexw8gjMA8xr5zUqK0JiR3CgARSqanYF3Z1YHvsErb1KDgh+v7Rg==}
     engines: {node: '>=12'}
 
+  semver@5.7.2:
+    resolution: {integrity: sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==}
+    hasBin: true
+
   semver@6.3.1:
     resolution: {integrity: sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==}
     hasBin: true
@@ -4679,17 +4953,41 @@ packages:
     resolution: {integrity: sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==}
     engines: {node: '>= 0.8.0'}
 
+  set-function-length@1.2.2:
+    resolution: {integrity: sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==}
+    engines: {node: '>= 0.4'}
+
+  set-function-name@2.0.2:
+    resolution: {integrity: sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==}
+    engines: {node: '>= 0.4'}
+
+  set-proto@1.0.0:
+    resolution: {integrity: sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==}
+    engines: {node: '>= 0.4'}
+
   setprototypeof@1.2.0:
     resolution: {integrity: sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==}
 
+  shebang-command@1.2.0:
+    resolution: {integrity: sha512-EV3L1+UQWGor21OmnvojK36mhg+TyIKDh3iFBKBohr5xeXIhNBcx8oWdgkTEEQ+BEFFYdLRuqMfd5L84N1V5Vg==}
+    engines: {node: '>=0.10.0'}
+
   shebang-command@2.0.0:
     resolution: {integrity: sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==}
     engines: {node: '>=8'}
 
+  shebang-regex@1.0.0:
+    resolution: {integrity: sha512-wpoSFAxys6b2a2wHZ1XpDSgD7N9iVjg29Ph9uV/uaP9Ex/KXlkTZTeddxDPSYQpgvzKLGJke2UU0AzoGCjNIvQ==}
+    engines: {node: '>=0.10.0'}
+
   shebang-regex@3.0.0:
     resolution: {integrity: sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==}
     engines: {node: '>=8'}
 
+  shell-quote@1.8.2:
+    resolution: {integrity: sha512-AzqKpGKjrj7EM6rKVQEPpB288oCfnrEIuyoT9cyF4nmGa7V8Zk6f7RRqYisX8X9m+Q7bd632aZW4ky7EhbQztA==}
+    engines: {node: '>= 0.4'}
+
   side-channel-list@1.0.0:
     resolution: {integrity: sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==}
     engines: {node: '>= 0.4'}
@@ -4766,6 +5064,18 @@ packages:
   spawndamnit@3.0.1:
     resolution: {integrity: sha512-MmnduQUuHCoFckZoWnXsTg7JaiLBJrKFj9UI2MbRPGaJeVpsLcVBu6P/IGZovziM/YBsellCmsprgNA+w0CzVg==}
 
+  spdx-correct@3.2.0:
+    resolution: {integrity: sha512-kN9dJbvnySHULIluDHy32WHRUu3Og7B9sbY7tsFLctQkIqnMh3hErYgdMjTYuqmcXX+lK5T1lnUt3G7zNswmZA==}
+
+  spdx-exceptions@2.5.0:
+    resolution: {integrity: sha512-PiU42r+xO4UbUS1buo3LPJkjlO7430Xn5SVAhdpzzsPHsjbYVflnnFdATgabnLude+Cqu25p6N+g2lw/PFsa4w==}
+
+  spdx-expression-parse@3.0.1:
+    resolution: {integrity: sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==}
+
+  spdx-license-ids@3.0.21:
+    resolution: {integrity: sha512-Bvg/8F5XephndSK3JffaRqdT+gyhfqIPwDHpX80tJrF8QQRYMo8sNMeaZ2Dp5+jhwKnUmIOyFFQfHRkjJm5nXg==}
+
   split2@4.2.0:
     resolution: {integrity: sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==}
     engines: {node: '>= 10.x'}
@@ -4817,6 +5127,22 @@ packages:
     resolution: {integrity: sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==}
     engines: {node: '>=12'}
 
+  string.prototype.padend@3.1.6:
+    resolution: {integrity: sha512-XZpspuSB7vJWhvJc9DLSlrXl1mcA2BdoY5jjnS135ydXqLoqhs96JjDtCkjJEQHvfqZIp9hBuBMgI589peyx9Q==}
+    engines: {node: '>= 0.4'}
+
+  string.prototype.trim@1.2.10:
+    resolution: {integrity: sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==}
+    engines: {node: '>= 0.4'}
+
+  string.prototype.trimend@1.0.9:
+    resolution: {integrity: sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==}
+    engines: {node: '>= 0.4'}
+
+  string.prototype.trimstart@1.0.8:
+    resolution: {integrity: sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==}
+    engines: {node: '>= 0.4'}
+
   string_decoder@1.1.1:
     resolution: {integrity: sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==}
 
@@ -5065,6 +5391,22 @@ packages:
     resolution: {integrity: sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==}
     engines: {node: '>= 0.6'}
 
+  typed-array-buffer@1.0.3:
+    resolution: {integrity: sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==}
+    engines: {node: '>= 0.4'}
+
+  typed-array-byte-length@1.0.3:
+    resolution: {integrity: sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==}
+    engines: {node: '>= 0.4'}
+
+  typed-array-byte-offset@1.0.4:
+    resolution: {integrity: sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==}
+    engines: {node: '>= 0.4'}
+
+  typed-array-length@1.0.7:
+    resolution: {integrity: sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==}
+    engines: {node: '>= 0.4'}
+
   typescript-eslint@8.29.0:
     resolution: {integrity: sha512-ep9rVd9B4kQsZ7ZnWCVxUE/xDLUUUsRzE0poAeNu+4CkFErLfuvPt/qtm2EpnSyfvsR0S6QzDFSrPCFBwf64fg==}
     engines: {node: ^18.18.0 || ^20.9.0 || >=21.1.0}
@@ -5094,6 +5436,10 @@ packages:
     resolution: {integrity: sha512-ZPtzy0hu4cZjv3z5NW9gfKnNLjoz4y6uv4HlelAjDK7sY/xOkKZv9xK/WQpcsBB3jEybChz9DPC2U/+cusjJVQ==}
     engines: {node: '>=18'}
 
+  unbox-primitive@1.1.0:
+    resolution: {integrity: sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==}
+    engines: {node: '>= 0.4'}
+
   unbzip2-stream@1.4.3:
     resolution: {integrity: sha512-mlExGW4w71ebDJviH16lQLtZS32VKqsSfk80GCfUlwT/4/hNRFsoscrF/c++9xinkMzECL1uL9DDwXqFWkruPg==}
 
@@ -5170,6 +5516,13 @@ packages:
     resolution: {integrity: sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==}
     engines: {node: '>=10.12.0'}
 
+  validate-branch-name@1.3.2:
+    resolution: {integrity: sha512-oBh69R6LGw/uwkieCVOnDNYi4NEmFSXBeVSPAhyvcGExrS1vUWkkEju30DeEIknVgx0UjOK0WmJC9u6ex4aPRg==}
+    hasBin: true
+
+  validate-npm-package-license@3.0.4:
+    resolution: {integrity: sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==}
+
   validate-npm-package-name@5.0.1:
     resolution: {integrity: sha512-OljLrQ9SQdOUqTaQxqL5dEfZWrXExyyWsozYlAWFawPVNuD83igl7uJD2RTkNMbniIYgt8l81eCJGIdQF7avLQ==}
     engines: {node: ^14.17.0 || ^16.13.0 || >=18.0.0}
@@ -5322,6 +5675,22 @@ packages:
   whatwg-url@7.1.0:
     resolution: {integrity: sha512-WUu7Rg1DroM7oQvGWfOiAK21n74Gg+T4elXEQYkOhtyLeWiJFoOGLXPKI/9gzIie9CtwVLm8wtw6YJdKyxSjeg==}
 
+  which-boxed-primitive@1.1.1:
+    resolution: {integrity: sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==}
+    engines: {node: '>= 0.4'}
+
+  which-builtin-type@1.2.1:
+    resolution: {integrity: sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==}
+    engines: {node: '>= 0.4'}
+
+  which-collection@1.0.2:
+    resolution: {integrity: sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==}
+    engines: {node: '>= 0.4'}
+
+  which-typed-array@1.1.19:
+    resolution: {integrity: sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==}
+    engines: {node: '>= 0.4'}
+
   which@1.3.1:
     resolution: {integrity: sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==}
     hasBin: true
@@ -8041,12 +8410,27 @@ snapshots:
 
   argparse@2.0.1: {}
 
+  array-buffer-byte-length@1.0.2:
+    dependencies:
+      call-bound: 1.0.4
+      is-array-buffer: 3.0.5
+
   array-flatten@1.1.1: {}
 
   array-ify@1.0.0: {}
 
   array-union@2.1.0: {}
 
+  arraybuffer.prototype.slice@1.0.4:
+    dependencies:
+      array-buffer-byte-length: 1.0.2
+      call-bind: 1.0.8
+      define-properties: 1.2.1
+      es-abstract: 1.23.9
+      es-errors: 1.3.0
+      get-intrinsic: 1.3.0
+      is-array-buffer: 3.0.5
+
   asn1@0.2.6:
     dependencies:
       safer-buffer: 2.1.2
@@ -8055,6 +8439,8 @@ snapshots:
 
   assertion-error@2.0.1: {}
 
+  async-function@1.0.0: {}
+
   async@3.2.4: {}
 
   async@3.2.6: {}
@@ -8065,6 +8451,10 @@ snapshots:
 
   atomic-sleep@1.0.0: {}
 
+  available-typed-arrays@1.0.7:
+    dependencies:
+      possible-typed-array-names: 1.1.0
+
   aws-sign2@0.7.0: {}
 
   aws4@1.13.2: {}
@@ -8307,6 +8697,13 @@ snapshots:
       es-errors: 1.3.0
       function-bind: 1.1.2
 
+  call-bind@1.0.8:
+    dependencies:
+      call-bind-apply-helpers: 1.0.2
+      es-define-property: 1.0.1
+      get-intrinsic: 1.3.0
+      set-function-length: 1.2.2
+
   call-bound@1.0.4:
     dependencies:
       call-bind-apply-helpers: 1.0.2
@@ -8526,6 +8923,15 @@ snapshots:
       path-type: 4.0.0
       yaml: 1.10.2
 
+  cosmiconfig@8.3.6(typescript@5.7.3):
+    dependencies:
+      import-fresh: 3.3.1
+      js-yaml: 4.1.0
+      parse-json: 5.2.0
+      path-type: 4.0.0
+    optionalDependencies:
+      typescript: 5.7.3
+
   cosmiconfig@9.0.0(typescript@5.7.3):
     dependencies:
       env-paths: 2.2.1
@@ -8535,6 +8941,14 @@ snapshots:
     optionalDependencies:
       typescript: 5.7.3
 
+  cross-spawn@6.0.6:
+    dependencies:
+      nice-try: 1.0.5
+      path-key: 2.0.1
+      semver: 5.7.2
+      shebang-command: 1.2.0
+      which: 1.3.1
+
   cross-spawn@7.0.6:
     dependencies:
       path-key: 3.1.1
@@ -8571,6 +8985,24 @@ snapshots:
       whatwg-mimetype: 3.0.0
       whatwg-url: 12.0.1
 
+  data-view-buffer@1.0.2:
+    dependencies:
+      call-bound: 1.0.4
+      es-errors: 1.3.0
+      is-data-view: 1.0.2
+
+  data-view-byte-length@1.0.2:
+    dependencies:
+      call-bound: 1.0.4
+      es-errors: 1.3.0
+      is-data-view: 1.0.2
+
+  data-view-byte-offset@1.0.1:
+    dependencies:
+      call-bound: 1.0.4
+      es-errors: 1.3.0
+      is-data-view: 1.0.2
+
   dayjs@1.11.13: {}
 
   de-indent@1.0.2: {}
@@ -8613,8 +9045,20 @@ snapshots:
 
   defer-to-connect@2.0.1: {}
 
+  define-data-property@1.1.4:
+    dependencies:
+      es-define-property: 1.0.1
+      es-errors: 1.3.0
+      gopd: 1.2.0
+
   define-lazy-prop@2.0.0: {}
 
+  define-properties@1.2.1:
+    dependencies:
+      define-data-property: 1.1.4
+      has-property-descriptors: 1.0.2
+      object-keys: 1.1.1
+
   delayed-stream@1.0.0: {}
 
   depd@2.0.0: {}
@@ -8728,6 +9172,60 @@ snapshots:
     dependencies:
       is-arrayish: 0.2.1
 
+  es-abstract@1.23.9:
+    dependencies:
+      array-buffer-byte-length: 1.0.2
+      arraybuffer.prototype.slice: 1.0.4
+      available-typed-arrays: 1.0.7
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      data-view-buffer: 1.0.2
+      data-view-byte-length: 1.0.2
+      data-view-byte-offset: 1.0.1
+      es-define-property: 1.0.1
+      es-errors: 1.3.0
+      es-object-atoms: 1.1.1
+      es-set-tostringtag: 2.1.0
+      es-to-primitive: 1.3.0
+      function.prototype.name: 1.1.8
+      get-intrinsic: 1.3.0
+      get-proto: 1.0.1
+      get-symbol-description: 1.1.0
+      globalthis: 1.0.4
+      gopd: 1.2.0
+      has-property-descriptors: 1.0.2
+      has-proto: 1.2.0
+      has-symbols: 1.1.0
+      hasown: 2.0.2
+      internal-slot: 1.1.0
+      is-array-buffer: 3.0.5
+      is-callable: 1.2.7
+      is-data-view: 1.0.2
+      is-regex: 1.2.1
+      is-shared-array-buffer: 1.0.4
+      is-string: 1.1.1
+      is-typed-array: 1.1.15
+      is-weakref: 1.1.1
+      math-intrinsics: 1.1.0
+      object-inspect: 1.13.4
+      object-keys: 1.1.1
+      object.assign: 4.1.7
+      own-keys: 1.0.1
+      regexp.prototype.flags: 1.5.4
+      safe-array-concat: 1.1.3
+      safe-push-apply: 1.0.0
+      safe-regex-test: 1.1.0
+      set-proto: 1.0.0
+      string.prototype.trim: 1.2.10
+      string.prototype.trimend: 1.0.9
+      string.prototype.trimstart: 1.0.8
+      typed-array-buffer: 1.0.3
+      typed-array-byte-length: 1.0.3
+      typed-array-byte-offset: 1.0.4
+      typed-array-length: 1.0.7
+      unbox-primitive: 1.1.0
+      which-typed-array: 1.1.19
+
   es-define-property@1.0.1: {}
 
   es-errors@1.3.0: {}
@@ -8745,6 +9243,12 @@ snapshots:
       has-tostringtag: 1.0.2
       hasown: 2.0.2
 
+  es-to-primitive@1.3.0:
+    dependencies:
+      is-callable: 1.2.7
+      is-date-object: 1.1.0
+      is-symbol: 1.1.1
+
   esbuild@0.25.2:
     optionalDependencies:
       '@esbuild/aix-ppc64': 0.25.2
@@ -9145,6 +9649,10 @@ snapshots:
 
   follow-redirects@1.15.9: {}
 
+  for-each@0.3.5:
+    dependencies:
+      is-callable: 1.2.7
+
   foreground-child@3.3.1:
     dependencies:
       cross-spawn: 7.0.6
@@ -9203,6 +9711,17 @@ snapshots:
 
   function-bind@1.1.2: {}
 
+  function.prototype.name@1.1.8:
+    dependencies:
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      define-properties: 1.2.1
+      functions-have-names: 1.2.3
+      hasown: 2.0.2
+      is-callable: 1.2.7
+
+  functions-have-names@1.2.3: {}
+
   gensync@1.0.0-beta.2: {}
 
   get-caller-file@2.0.5: {}
@@ -9234,10 +9753,20 @@ snapshots:
       '@sec-ant/readable-stream': 0.4.1
       is-stream: 4.0.1
 
+  get-symbol-description@1.1.0:
+    dependencies:
+      call-bound: 1.0.4
+      es-errors: 1.3.0
+      get-intrinsic: 1.3.0
+
   getpass@0.1.7:
     dependencies:
       assert-plus: 1.0.0
 
+  git-local-info@1.0.1:
+    dependencies:
+      ini: 1.3.8
+
   git-raw-commits@4.0.0:
     dependencies:
       dargs: 8.1.0
@@ -9298,6 +9827,11 @@ snapshots:
 
   globals@15.15.0: {}
 
+  globalthis@1.0.4:
+    dependencies:
+      define-properties: 1.2.1
+      gopd: 1.2.0
+
   globby@11.1.0:
     dependencies:
       array-union: 2.1.0
@@ -9347,10 +9881,20 @@ snapshots:
 
   harmony-reflect@1.6.2: {}
 
+  has-bigints@1.1.0: {}
+
   has-flag@3.0.0: {}
 
   has-flag@4.0.0: {}
 
+  has-property-descriptors@1.0.2:
+    dependencies:
+      es-define-property: 1.0.1
+
+  has-proto@1.2.0:
+    dependencies:
+      dunder-proto: 1.0.1
+
   has-symbols@1.1.0: {}
 
   has-tostringtag@1.0.2:
@@ -9367,6 +9911,8 @@ snapshots:
     dependencies:
       parse-passwd: 1.0.0
 
+  hosted-git-info@2.8.9: {}
+
   hosted-git-info@7.0.2:
     dependencies:
       lru-cache: 10.4.3
@@ -9510,24 +10056,77 @@ snapshots:
     dependencies:
       kind-of: 6.0.3
 
+  internal-slot@1.1.0:
+    dependencies:
+      es-errors: 1.3.0
+      hasown: 2.0.2
+      side-channel: 1.1.0
+
   ipaddr.js@1.9.1: {}
 
+  is-array-buffer@3.0.5:
+    dependencies:
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      get-intrinsic: 1.3.0
+
   is-arrayish@0.2.1: {}
 
+  is-async-function@2.1.1:
+    dependencies:
+      async-function: 1.0.0
+      call-bound: 1.0.4
+      get-proto: 1.0.1
+      has-tostringtag: 1.0.2
+      safe-regex-test: 1.1.0
+
+  is-bigint@1.1.0:
+    dependencies:
+      has-bigints: 1.1.0
+
+  is-boolean-object@1.2.2:
+    dependencies:
+      call-bound: 1.0.4
+      has-tostringtag: 1.0.2
+
+  is-callable@1.2.7: {}
+
   is-core-module@2.16.1:
     dependencies:
       hasown: 2.0.2
 
+  is-data-view@1.0.2:
+    dependencies:
+      call-bound: 1.0.4
+      get-intrinsic: 1.3.0
+      is-typed-array: 1.1.15
+
+  is-date-object@1.1.0:
+    dependencies:
+      call-bound: 1.0.4
+      has-tostringtag: 1.0.2
+
   is-deflate@1.0.0: {}
 
   is-docker@2.2.1: {}
 
   is-extglob@2.1.1: {}
 
+  is-finalizationregistry@1.1.1:
+    dependencies:
+      call-bound: 1.0.4
+
   is-fullwidth-code-point@3.0.0: {}
 
   is-generator-fn@2.1.0: {}
 
+  is-generator-function@1.1.0:
+    dependencies:
+      call-bound: 1.0.4
+      get-proto: 1.0.1
+      has-tostringtag: 1.0.2
+      safe-regex-test: 1.1.0
+
   is-glob@4.0.3:
     dependencies:
       is-extglob: 2.1.1
@@ -9536,6 +10135,13 @@ snapshots:
 
   is-interactive@1.0.0: {}
 
+  is-map@2.0.3: {}
+
+  is-number-object@1.1.1:
+    dependencies:
+      call-bound: 1.0.4
+      has-tostringtag: 1.0.2
+
   is-number@7.0.0: {}
 
   is-obj@2.0.0: {}
@@ -9548,24 +10154,63 @@ snapshots:
 
   is-promise@2.2.2: {}
 
+  is-regex@1.2.1:
+    dependencies:
+      call-bound: 1.0.4
+      gopd: 1.2.0
+      has-tostringtag: 1.0.2
+      hasown: 2.0.2
+
+  is-set@2.0.3: {}
+
+  is-shared-array-buffer@1.0.4:
+    dependencies:
+      call-bound: 1.0.4
+
   is-stream@2.0.1: {}
 
   is-stream@4.0.1: {}
 
+  is-string@1.1.1:
+    dependencies:
+      call-bound: 1.0.4
+      has-tostringtag: 1.0.2
+
   is-subdir@1.2.0:
     dependencies:
       better-path-resolve: 1.0.0
 
+  is-symbol@1.1.1:
+    dependencies:
+      call-bound: 1.0.4
+      has-symbols: 1.1.0
+      safe-regex-test: 1.1.0
+
   is-text-path@2.0.0:
     dependencies:
       text-extensions: 2.4.0
 
+  is-typed-array@1.1.15:
+    dependencies:
+      which-typed-array: 1.1.19
+
   is-typedarray@1.0.0: {}
 
   is-unicode-supported@0.1.0: {}
 
   is-utf8@0.2.1: {}
 
+  is-weakmap@2.0.2: {}
+
+  is-weakref@1.1.1:
+    dependencies:
+      call-bound: 1.0.4
+
+  is-weakset@2.0.4:
+    dependencies:
+      call-bound: 1.0.4
+      get-intrinsic: 1.3.0
+
   is-windows@1.0.2: {}
 
   is-wsl@2.2.0:
@@ -9574,6 +10219,8 @@ snapshots:
 
   isarray@1.0.0: {}
 
+  isarray@2.0.5: {}
+
   isexe@2.0.0: {}
 
   isstream@0.1.2: {}
@@ -9959,6 +10606,8 @@ snapshots:
 
   json-buffer@3.0.1: {}
 
+  json-parse-better-errors@1.0.2: {}
+
   json-parse-even-better-errors@2.3.1: {}
 
   json-schema-traverse@0.4.1: {}
@@ -10046,6 +10695,13 @@ snapshots:
 
   lines-and-columns@2.0.3: {}
 
+  load-json-file@4.0.0:
+    dependencies:
+      graceful-fs: 4.2.11
+      parse-json: 4.0.0
+      pify: 3.0.0
+      strip-bom: 3.0.0
+
   load-tsconfig@0.2.5: {}
 
   local-pkg@1.1.1:
@@ -10161,6 +10817,8 @@ snapshots:
 
   media-typer@0.3.0: {}
 
+  memorystream@0.3.1: {}
+
   meow@12.1.1: {}
 
   merge-descriptors@1.0.3: {}
@@ -10265,6 +10923,8 @@ snapshots:
 
   neo-async@2.6.2: {}
 
+  nice-try@1.0.5: {}
+
   node-fetch@2.6.7(encoding@0.1.13):
     dependencies:
       whatwg-url: 5.0.0
@@ -10277,6 +10937,13 @@ snapshots:
 
   node-releases@2.0.19: {}
 
+  normalize-package-data@2.5.0:
+    dependencies:
+      hosted-git-info: 2.8.9
+      resolve: 1.22.10
+      semver: 5.7.2
+      validate-npm-package-license: 3.0.4
+
   normalize-path@3.0.0: {}
 
   normalize-url@8.0.1: {}
@@ -10288,6 +10955,18 @@ snapshots:
       semver: 7.7.1
       validate-npm-package-name: 5.0.1
 
+  npm-run-all@4.1.5:
+    dependencies:
+      ansi-styles: 3.2.1
+      chalk: 2.4.2
+      cross-spawn: 6.0.6
+      memorystream: 0.3.1
+      minimatch: 3.1.2
+      pidtree: 0.3.1
+      read-pkg: 3.0.0
+      shell-quote: 1.8.2
+      string.prototype.padend: 3.1.6
+
   npm-run-path@4.0.1:
     dependencies:
       path-key: 3.1.1
@@ -10402,6 +11081,17 @@ snapshots:
 
   object-inspect@1.13.4: {}
 
+  object-keys@1.1.1: {}
+
+  object.assign@4.1.7:
+    dependencies:
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      define-properties: 1.2.1
+      es-object-atoms: 1.1.1
+      has-symbols: 1.1.0
+      object-keys: 1.1.1
+
   on-exit-leak-free@2.1.2: {}
 
   on-finished@2.4.1:
@@ -10462,6 +11152,12 @@ snapshots:
 
   outdent@0.5.0: {}
 
+  own-keys@1.0.1:
+    dependencies:
+      get-intrinsic: 1.3.0
+      object-keys: 1.1.1
+      safe-push-apply: 1.0.0
+
   p-cancelable@3.0.0: {}
 
   p-filter@2.1.0:
@@ -10508,6 +11204,11 @@ snapshots:
     dependencies:
       callsites: 3.1.0
 
+  parse-json@4.0.0:
+    dependencies:
+      error-ex: 1.3.2
+      json-parse-better-errors: 1.0.2
+
   parse-json@5.2.0:
     dependencies:
       '@babel/code-frame': 7.26.2
@@ -10531,6 +11232,8 @@ snapshots:
 
   path-is-absolute@1.0.1: {}
 
+  path-key@2.0.1: {}
+
   path-key@3.1.1: {}
 
   path-parse@1.0.7: {}
@@ -10542,6 +11245,10 @@ snapshots:
 
   path-to-regexp@0.1.12: {}
 
+  path-type@3.0.0:
+    dependencies:
+      pify: 3.0.0
+
   path-type@4.0.0: {}
 
   pathe@2.0.3: {}
@@ -10566,6 +11273,8 @@ snapshots:
 
   picomatch@4.0.2: {}
 
+  pidtree@0.3.1: {}
+
   pify@3.0.0: {}
 
   pify@4.0.1: {}
@@ -10622,6 +11331,8 @@ snapshots:
     transitivePeerDependencies:
       - supports-color
 
+  possible-typed-array-names@1.1.0: {}
+
   postcss-load-config@6.0.1(jiti@2.4.2)(postcss@8.5.3)(yaml@2.7.1):
     dependencies:
       lilconfig: 3.1.3
@@ -10711,6 +11422,12 @@ snapshots:
 
   react-is@18.3.1: {}
 
+  read-pkg@3.0.0:
+    dependencies:
+      load-json-file: 4.0.0
+      normalize-package-data: 2.5.0
+      path-type: 3.0.0
+
   read-yaml-file@1.1.0:
     dependencies:
       graceful-fs: 4.2.11
@@ -10746,6 +11463,17 @@ snapshots:
 
   real-require@0.2.0: {}
 
+  reflect.getprototypeof@1.0.10:
+    dependencies:
+      call-bind: 1.0.8
+      define-properties: 1.2.1
+      es-abstract: 1.23.9
+      es-errors: 1.3.0
+      es-object-atoms: 1.1.1
+      get-intrinsic: 1.3.0
+      get-proto: 1.0.1
+      which-builtin-type: 1.2.1
+
   regenerate-unicode-properties@10.2.0:
     dependencies:
       regenerate: 1.4.2
@@ -10758,6 +11486,15 @@ snapshots:
     dependencies:
       '@babel/runtime': 7.27.0
 
+  regexp.prototype.flags@1.5.4:
+    dependencies:
+      call-bind: 1.0.8
+      define-properties: 1.2.1
+      es-errors: 1.3.0
+      get-proto: 1.0.1
+      gopd: 1.2.0
+      set-function-name: 2.0.2
+
   regexpu-core@6.2.0:
     dependencies:
       regenerate: 1.4.2
@@ -10851,10 +11588,29 @@ snapshots:
     dependencies:
       tslib: 2.8.1
 
+  safe-array-concat@1.1.3:
+    dependencies:
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      get-intrinsic: 1.3.0
+      has-symbols: 1.1.0
+      isarray: 2.0.5
+
   safe-buffer@5.1.2: {}
 
   safe-buffer@5.2.1: {}
 
+  safe-push-apply@1.0.0:
+    dependencies:
+      es-errors: 1.3.0
+      isarray: 2.0.5
+
+  safe-regex-test@1.1.0:
+    dependencies:
+      call-bound: 1.0.4
+      es-errors: 1.3.0
+      is-regex: 1.2.1
+
   safe-stable-stringify@2.5.0: {}
 
   safer-buffer@2.1.2: {}
@@ -10875,6 +11631,8 @@ snapshots:
     dependencies:
       semver: 7.7.1
 
+  semver@5.7.2: {}
+
   semver@6.3.1: {}
 
   semver@7.5.4:
@@ -10912,14 +11670,44 @@ snapshots:
     transitivePeerDependencies:
       - supports-color
 
+  set-function-length@1.2.2:
+    dependencies:
+      define-data-property: 1.1.4
+      es-errors: 1.3.0
+      function-bind: 1.1.2
+      get-intrinsic: 1.3.0
+      gopd: 1.2.0
+      has-property-descriptors: 1.0.2
+
+  set-function-name@2.0.2:
+    dependencies:
+      define-data-property: 1.1.4
+      es-errors: 1.3.0
+      functions-have-names: 1.2.3
+      has-property-descriptors: 1.0.2
+
+  set-proto@1.0.0:
+    dependencies:
+      dunder-proto: 1.0.1
+      es-errors: 1.3.0
+      es-object-atoms: 1.1.1
+
   setprototypeof@1.2.0: {}
 
+  shebang-command@1.2.0:
+    dependencies:
+      shebang-regex: 1.0.0
+
   shebang-command@2.0.0:
     dependencies:
       shebang-regex: 3.0.0
 
+  shebang-regex@1.0.0: {}
+
   shebang-regex@3.0.0: {}
 
+  shell-quote@1.8.2: {}
+
   side-channel-list@1.0.0:
     dependencies:
       es-errors: 1.3.0
@@ -11008,6 +11796,20 @@ snapshots:
       cross-spawn: 7.0.6
       signal-exit: 4.1.0
 
+  spdx-correct@3.2.0:
+    dependencies:
+      spdx-expression-parse: 3.0.1
+      spdx-license-ids: 3.0.21
+
+  spdx-exceptions@2.5.0: {}
+
+  spdx-expression-parse@3.0.1:
+    dependencies:
+      spdx-exceptions: 2.5.0
+      spdx-license-ids: 3.0.21
+
+  spdx-license-ids@3.0.21: {}
+
   split2@4.2.0: {}
 
   sprintf-js@1.0.3: {}
@@ -11066,6 +11868,36 @@ snapshots:
       emoji-regex: 9.2.2
       strip-ansi: 7.1.0
 
+  string.prototype.padend@3.1.6:
+    dependencies:
+      call-bind: 1.0.8
+      define-properties: 1.2.1
+      es-abstract: 1.23.9
+      es-object-atoms: 1.1.1
+
+  string.prototype.trim@1.2.10:
+    dependencies:
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      define-data-property: 1.1.4
+      define-properties: 1.2.1
+      es-abstract: 1.23.9
+      es-object-atoms: 1.1.1
+      has-property-descriptors: 1.0.2
+
+  string.prototype.trimend@1.0.9:
+    dependencies:
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      define-properties: 1.2.1
+      es-object-atoms: 1.1.1
+
+  string.prototype.trimstart@1.0.8:
+    dependencies:
+      call-bind: 1.0.8
+      define-properties: 1.2.1
+      es-object-atoms: 1.1.1
+
   string_decoder@1.1.1:
     dependencies:
       safe-buffer: 5.1.2
@@ -11312,6 +12144,39 @@ snapshots:
       media-typer: 0.3.0
       mime-types: 2.1.35
 
+  typed-array-buffer@1.0.3:
+    dependencies:
+      call-bound: 1.0.4
+      es-errors: 1.3.0
+      is-typed-array: 1.1.15
+
+  typed-array-byte-length@1.0.3:
+    dependencies:
+      call-bind: 1.0.8
+      for-each: 0.3.5
+      gopd: 1.2.0
+      has-proto: 1.2.0
+      is-typed-array: 1.1.15
+
+  typed-array-byte-offset@1.0.4:
+    dependencies:
+      available-typed-arrays: 1.0.7
+      call-bind: 1.0.8
+      for-each: 0.3.5
+      gopd: 1.2.0
+      has-proto: 1.2.0
+      is-typed-array: 1.1.15
+      reflect.getprototypeof: 1.0.10
+
+  typed-array-length@1.0.7:
+    dependencies:
+      call-bind: 1.0.8
+      for-each: 0.3.5
+      gopd: 1.2.0
+      is-typed-array: 1.1.15
+      possible-typed-array-names: 1.1.0
+      reflect.getprototypeof: 1.0.10
+
   typescript-eslint@8.29.0(eslint@9.23.0(jiti@2.4.2))(typescript@5.7.3):
     dependencies:
       '@typescript-eslint/eslint-plugin': 8.29.0(@typescript-eslint/parser@8.29.0(eslint@9.23.0(jiti@2.4.2))(typescript@5.7.3))(eslint@9.23.0(jiti@2.4.2))(typescript@5.7.3)
@@ -11333,6 +12198,13 @@ snapshots:
 
   uint8array-extras@1.4.0: {}
 
+  unbox-primitive@1.1.0:
+    dependencies:
+      call-bound: 1.0.4
+      has-bigints: 1.1.0
+      has-symbols: 1.1.0
+      which-boxed-primitive: 1.1.1
+
   unbzip2-stream@1.4.3:
     dependencies:
       buffer: 5.7.1
@@ -11394,6 +12266,19 @@ snapshots:
       '@types/istanbul-lib-coverage': 2.0.6
       convert-source-map: 2.0.0
 
+  validate-branch-name@1.3.2(typescript@5.7.3):
+    dependencies:
+      commander: 8.3.0
+      cosmiconfig: 8.3.6(typescript@5.7.3)
+      git-local-info: 1.0.1
+    transitivePeerDependencies:
+      - typescript
+
+  validate-npm-package-license@3.0.4:
+    dependencies:
+      spdx-correct: 3.2.0
+      spdx-expression-parse: 3.0.1
+
   validate-npm-package-name@5.0.1: {}
 
   validator@13.12.0: {}
@@ -11602,6 +12487,47 @@ snapshots:
       tr46: 1.0.1
       webidl-conversions: 4.0.2
 
+  which-boxed-primitive@1.1.1:
+    dependencies:
+      is-bigint: 1.1.0
+      is-boolean-object: 1.2.2
+      is-number-object: 1.1.1
+      is-string: 1.1.1
+      is-symbol: 1.1.1
+
+  which-builtin-type@1.2.1:
+    dependencies:
+      call-bound: 1.0.4
+      function.prototype.name: 1.1.8
+      has-tostringtag: 1.0.2
+      is-async-function: 2.1.1
+      is-date-object: 1.1.0
+      is-finalizationregistry: 1.1.1
+      is-generator-function: 1.1.0
+      is-regex: 1.2.1
+      is-weakref: 1.1.1
+      isarray: 2.0.5
+      which-boxed-primitive: 1.1.1
+      which-collection: 1.0.2
+      which-typed-array: 1.1.19
+
+  which-collection@1.0.2:
+    dependencies:
+      is-map: 2.0.3
+      is-set: 2.0.3
+      is-weakmap: 2.0.2
+      is-weakset: 2.0.4
+
+  which-typed-array@1.1.19:
+    dependencies:
+      available-typed-arrays: 1.0.7
+      call-bind: 1.0.8
+      call-bound: 1.0.4
+      for-each: 0.3.5
+      get-proto: 1.0.1
+      gopd: 1.2.0
+      has-tostringtag: 1.0.2
+
   which@1.3.1:
     dependencies:
       isexe: 2.0.0
diff --git a/tools/alienfish-core/CHANGELOG.md b/tools/alienfish-core/CHANGELOG.md
new file mode 100644
index 0000000..ce27aaa
--- /dev/null
+++ b/tools/alienfish-core/CHANGELOG.md
@@ -0,0 +1,7 @@
+# @alienfishconsulting/alienfish-core
+
+## 0.1.0
+
+### Minor Changes
+
+- 03fb92f: This is a test summary from the changeset CLI command
diff --git a/tools/scripts/init.sh b/tools/scripts/init.sh
new file mode 100644
index 0000000..b046aeb
--- /dev/null
+++ b/tools/scripts/init.sh
@@ -0,0 +1,112 @@
+#!/usr/bin/env bash
+
+# Set colors for better visibility
+RED='\033[0;31m'
+GREEN='\033[0;32m'
+YELLOW='\033[0;33m'
+BLUE='\033[0;34m'
+PURPLE='\033[0;35m'
+CYAN='\033[0;36m'
+GRAY='\033[0;90m'
+BOLD='\033[1m'
+RESET='\033[0m'
+
+# Repository root directory (where the script is run from)
+REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || pwd)
+cd "$REPO_ROOT" || { echo -e "${RED}${BOLD}Failed to cd to repository root${RESET}"; exit 1; }
+
+# Print header
+echo -e "\n${BLUE}${BOLD}==========================================${RESET}"
+echo -e "${BLUE}${BOLD}    PROJECT INITIALIZATION SCRIPT    ${RESET}"
+echo -e "${BLUE}${BOLD}==========================================${RESET}\n"
+
+# Function to print step info
+print_step() {
+  echo -e "\n${CYAN}${BOLD}[STEP $1/${TOTAL_STEPS}]${RESET} ${BOLD}$2${RESET}"
+}
+
+# Function to print task status
+print_task() {
+  echo -e "${GRAY}  → $1${RESET}"
+}
+
+# Function to print success
+print_success() {
+  echo -e "${GREEN}  ✓ $1${RESET}"
+}
+
+# Function to print error
+print_error() {
+  echo -e "${RED}  ✗ $1${RESET}"
+  echo -e "${RED}  ✗ Error details: $2${RESET}"
+}
+
+# Count total steps to display progress
+TOTAL_STEPS=6
+
+# Step 1: Clean directories
+print_step 1 "Cleaning project directories"
+directories=("dist" "node_modules" ".nx" "tmp" "coverage")
+
+for dir in "${directories[@]}"; do
+  print_task "Removing $dir directories..."
+  find . -type d -name "$dir" -prune -exec rm -rf {} \; 2>/dev/null &
+done
+
+# Wait for all rm commands to finish
+wait
+print_success "All directories cleaned"
+
+# Step 2: Clear pnpm cache
+print_step 2 "Clearing pnpm cache"
+print_task "Running pnpm store prune..."
+if pnpm store prune; then
+  print_success "pnpm cache cleared"
+else
+  print_error "Failed to clear pnpm cache" "$?"
+fi
+
+# Step 3: Install dependencies
+print_step 3 "Installing dependencies"
+print_task "Running pnpm install..."
+if pnpm install; then
+  print_success "Dependencies installed"
+else
+  print_error "Failed to install dependencies" "$?"
+  echo -e "${YELLOW}${BOLD}⚠️ Continuing despite error, but subsequent steps may fail.${RESET}\n"
+fi
+
+# Step 4: Reset NX cache
+print_step 4 "Resetting NX cache"
+print_task "Running pnpm nx reset..."
+if pnpm nx reset; then
+  print_success "NX cache reset"
+else
+  print_error "Failed to reset NX cache" "$?"
+fi
+
+# Step 5: Build project
+print_step 5 "Building project"
+print_task "Running pnpm build..."
+if FORCE_COLOR=1 pnpm build; then
+  print_success "Project built successfully"
+else
+  print_error "Failed to build project" "$?"
+  echo -e "${YELLOW}${BOLD}⚠️ Continuing despite error, but subsequent steps may fail.${RESET}\n"
+fi
+
+# Step 6: Run tests
+print_step 6 "Running tests"
+print_task "Running pnpm test..."
+if FORCE_COLOR=1 pnpm test; then
+  print_success "Tests passed"
+else
+  print_error "Some tests failed" "$?"
+fi
+
+# Print summary
+echo -e "\n${BLUE}${BOLD}==========================================${RESET}"
+echo -e "${GREEN}${BOLD}    INITIALIZATION COMPLETE    ${RESET}"
+echo -e "${BLUE}${BOLD}==========================================${RESET}\n"
+
+exit 0
\ No newline at end of file
