name: üèóÔ∏è Build the Application

on:
  workflow_call:
    inputs:
      pnpm-cache-key:
        description: "The generated pnpm cache key"
        required: true
        type: string
      node-version:
        description: "Node.js version"
        required: false
        default: "22"
        type: string
      pnpm-version:
        description: "pnpm version"
        required: false
        default: "10.6.4"
        type: string
    secrets:
      NX_CLOUD_ACCESS_TOKEN:
        description: "Nx Cloud access token"
        required: true
    outputs:
      build-cache-key:
        description: "Build cache key"
        value: ${{ jobs.build.outputs.build-cache-key }}
      build-artifact-key:
        description: "Build artifact key"
        value: ${{ jobs.build.outputs.build-artifact-key }}

jobs:
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    env:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    outputs:
      build-cache-key: ${{ steps.build-keys.outputs.build-cache-key }}
      build-artifact-key: ${{ steps.build-keys.outputs.build-artifact-key }}
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üßÆ Calculate Nx Base and Head
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ inputs.pnpm-version }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'pnpm'

      - name: üìö Restore dependency cache
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ inputs.pnpm-cache-key }}

      - name: üì• Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          echo "üîÑ Cache miss - Installing dependencies..."
          pnpm install --frozen-lockfile
          echo "‚úÖ Dependencies installed successfully"     

      - name: Create build cache keys
        id: build-keys
        run: |
          echo "build-cache-key=build-node-${{ inputs.node-version }}-pnpm${{ inputs.pnpm-version }}-${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "build-artifact-key=build-artifacts-node-${{ inputs.node-version }}-pnpm-${{ inputs.pnpm-version }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: üíæ Cache build artifacts
        uses: actions/cache@v4
        id: build-cache
        with:
          path: |
            packages/*/dist
          key: ${{ steps.build-keys.outputs.build-artifact-key }}

      - name: üèóÔ∏è Build affected projects
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          echo "üîç Building affected projects..."
          echo "Using base: $NX_BASE"
          echo "Using head: $NX_HEAD"

          pnpm nx affected --target=build --head=${{ env.NX_HEAD }} --base=${{ env.NX_BASE }} --parallel=3
          echo "‚úÖ Build completed successfully"
          echo "build-success=true" >> $GITHUB_OUTPUT

      # This step verifies what will be uploaded
      - name: üîç Verify build artifacts
        if: steps.build-cache.outputs.cache-hit != 'true'
        id: verify-artifacts
        run: |
          echo "Verifying build artifacts..."
          
          # List all dist directories that will be included
          PACKAGE_DISTS=$(find ./packages -type d -name "dist" | sort)
          
          # Count them
          DIST_COUNT=$(echo "$PACKAGE_DISTS" | wc -l)
          
          # Store the list for the summary
          echo "PACKAGE_DISTS<<EOF" >> $GITHUB_ENV
          echo "$PACKAGE_DISTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "dist_count=$DIST_COUNT" >> $GITHUB_OUTPUT
          
          # Confirm no node_modules or tools/dist will be included
          NODE_MODULES_DISTS=$(find ./node_modules -type d -name "dist" 2>/dev/null | wc -l)
          TOOLS_DIST=$(find ./tools -type d -name "dist" 2>/dev/null | wc -l)
          
          echo "Found $DIST_COUNT package dist folders to upload"
          echo "Found $NODE_MODULES_DISTS node_modules dist folders (will be excluded)"
          echo "Found $TOOLS_DIST tools dist folders (will be excluded)"
          
          # Make sure we have at least some dist folders
          if [[ $DIST_COUNT -eq 0 ]]; then
            echo "::warning::No dist folders found in packages directory! Build may have failed."
          fi

      - name: üì§ Upload build artifacts
        if: steps.build-cache.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{steps.build-keys.outputs.build-cache-key }}
          path: |
            packages/*/dist
          retention-days: 3

      - name: üìä Generate Build Summary
        id: build-summary
        run: |
          echo "## üèóÔ∏è Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.build-cache.outputs.cache-hit }}" == "true" ]]; then
            echo "‚úÖ Build artifacts restored from cache" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ Build completed successfully" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Size |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          
          # Only show packages/*/dist folders
          echo "$PACKAGE_DISTS" | while read dir; do
            if [[ -d "$dir" ]]; then
              # Extract package name from path
              PACKAGE_NAME=$(echo "$dir" | sed -E 's|./packages/([^/]+)/dist|\1|')
              SIZE=$(du -sh "$dir" | cut -f1)
              echo "| \`$PACKAGE_NAME\` | $SIZE |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Total artifacts: ${{ steps.verify-artifacts.outputs.dist_count }} packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Only packages/*/dist folders are included in artifacts." >> $GITHUB_STEP_SUMMARY