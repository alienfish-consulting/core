############################################################################
# 🧰 Advanced Environment Setup Workflow
############################################################################
#
# DESCRIPTION:
#   This reusable workflow handles environment setup for Node.js projects
#   using pnpm and Nx. It provides high-performance caching without requiring
#   Nx Cloud, with support for manual cache invalidation.
#
# FEATURES:
#   - ⚡ Performance optimizations:
#     - Local Nx cache optimization with selective archiving
#     - Optional sparse checkout for large repositories
#     - Optimized Git performance settings
#   - 🔄 Advanced caching:
#     - Version-based cache keys for easy invalidation
#     - Separate dependency and Nx caches
#     - Hash-based cache keys for precision
#   - 🛠️ Configurable options:
#     - Node.js and pnpm versions
#     - Cache version for invalidation
#     - Sparse checkout toggle
#   - 📊 Status dashboard with cache hits and repo state
#
# OUTPUTS:
#   - pnpm-cache-key: Cache key for dependencies
#   - nx-cache-key: Cache key for Nx
#   - cache-hit: Whether dependency cache was hit (true/false)
#
# USAGE EXAMPLE:
#   jobs:
#     setup:
#       name: 🧰 Setup
#       uses: ./.github/workflows/setup.yml
#       with:
#         cache-version: "v1"  # Increment to invalidate ALL caches
#         node-version: "18"
#         pnpm-version: "10.6.4"
#         sparse-checkout: false
#       secrets:
#         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#     your-job:
#       needs: setup
#       runs-on: ubuntu-latest
#       steps:
#         # Reference outputs like:
#         # ${{ needs.setup.outputs.pnpm-cache-key }}
#
############################################################################

name: 🧰 Setup Environment

on:
  workflow_call:
    inputs:
      cache-version:
        description: "Cache version for manual invalidation"
        required: false
        type: string
        default: "v1"
      node-version:
        description: "Node.js version"
        required: false
        type: string
        default: "18"
      pnpm-version:
        description: "PNPM version"
        required: false
        type: string
        default: "10.6.4"
      sparse-checkout:
        description: "Enable sparse checkout for faster cloning (use only if repo structure is stable)"
        required: false
        type: boolean
        default: false
    outputs:
      pnpm-cache-key:
        description: "Cache key for dependencies"
        value: ${{ jobs.setup.outputs.pnpm-cache-key }}
      cache-hit:
        description: "Whether dependency cache was hit"
        value: ${{ jobs.setup.outputs.cache-hit }}
      has-changesets:
        description: "Whether there are changesets currently in the repo."
        value: ${{ jobs.check-changesets.outputs.has_changesets }}
    secrets:
      GH_TOKEN:
        description: 'GitHub token for accessing the repository'
        required: true
      NX_CLOUD_ACCESS_TOKEN:
        required: true
        description: 'Nx Cloud access token for distributed task execution'

jobs:
  check-changesets:
    runs-on: ubuntu-latest
    outputs:
      has_changesets: ${{ steps.check.outputs.has_changesets }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for changesets
        run: |
          echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
          if [ -d ".changeset" ]; then
            changeset_files=$(find .changeset -name "*.md" ! -name "README.md" | wc -l)
            if [ $changeset_files -eq 0 ]; then
              echo "has_changesets=false" >> $GITHUB_OUTPUT
              echo "❌No changeset files found in .changeset directory" >> $GITHUB_STEP_SUMMARY
            else
              echo "has_changesets=true" >> $GITHUB_OUTPUT
              echo "✅ Changeset files found in .changeset directory" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ .changeset directory not found"
            exit 1
          fi
  setup:
    name: 🛠️ Environment Setup
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      actions: 'read'
      pull-requests: 'read'
    outputs:
      pnpm-cache-key: ${{ steps.generate-cache-keys.outputs.pnpm-key }}
      nx-head: ${{ steps.set-nx-vars.outputs.nx-head }}
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    env:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          # Use sparse checkout if requested
          sparse-checkout: ${{ inputs.sparse-checkout && 'package.json pnpm-lock.yaml nx.json tsconfig.json .github apps libs' || '' }}
          sparse-checkout-cone-mode: false

      - name: ⚡ Optimize Git for CI
        run: |
          echo "🔧 Configuring Git for optimal CI performance..."
          git config --global core.autocrlf false
          git config --global core.symlinks true
          git config --global core.preloadindex true
          git config --global core.fscache true
          echo "✅ Git optimization complete"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ inputs.pnpm-version }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'pnpm'

      - name: 🔑 Generate versioned cache keys
        id: generate-cache-keys
        run: |
          echo "🔄 Generating versioned cache keys..."
          
          # Create robust keys with version component
          NODE_VERSION="${{ inputs.node-version }}"
          PNPM_VERSION="${{ inputs.pnpm-version }}"
          CACHE_VERSION="${{ inputs.cache-version }}"
          
          # Get hash of package files
          LOCK_HASH=$(sha256sum pnpm-lock.yaml | cut -d ' ' -f1)
           
          # Create and output the cache keys
          PNPM_KEY="${CACHE_VERSION}-node${NODE_VERSION}-pnpm${PNPM_VERSION}-deps-${LOCK_HASH:0:8}"
          
          echo "pnpm-key=${PNPM_KEY}" >> $GITHUB_OUTPUT
          
          # Log for debugging
          echo "📝 Generated pnpm cache key: ${PNPM_KEY}"

      - name: 📚 Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ steps.generate-cache-keys.outputs.pnpm-key }}

      - name: 📥 Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          echo "🔄 Cache miss - Installing dependencies..."
          pnpm install --frozen-lockfile
          echo "✅ Dependencies installed successfully"

      - name: 📊 Environment Dashboard
        run: |
          echo "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"
          echo "┃                           🧰 ENVIRONMENT DASHBOARD                            ┃"
          echo "┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫"
          echo "┃                                                                               ┃"
          echo "┃  🔖 Repository Info:                                                          ┃"
          echo "┃  • Branch: $(git branch --show-current)                                       "
          echo "┃  • Commit: $(git rev-parse --short HEAD)                                      "
          echo "┃                                                                               ┃"
          echo "┃  🧩 Environment:                                                              ┃"
          echo "┃  • Node.js: ${{ inputs.node-version }}                                        "
          echo "┃  • PNPM: ${{ inputs.pnpm-version }}                                           "
          echo "┃  • Cache Version: ${{ inputs.cache-version }}                                 "
          echo "┃                                                                               ┃"
          echo "┃  💾 Cache Status:                                                             ┃"
          DEPS_CACHE_STATUS="${{ steps.cache-deps.outputs.cache-hit == 'true' && '✅ Hit' || '❌ Miss' }}"
          echo "┃  • Dependencies: $DEPS_CACHE_STATUS                                           "
          echo "┃                                                                               ┃"
          echo "┃  🔑 Cache Keys:                                                               ┃"
          echo "┃  • PNPM: ${{ steps.generate-cache-keys.outputs.pnpm-key }}                    "
          echo "┃                                                                               ┃"
          echo "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"
          
          # Generate summary for GitHub
          echo "## 🧰 Environment Setup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔖 Repository" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** $(git branch --show-current)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** $(git rev-parse --short HEAD)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💾 Cache Status" >> $GITHUB_STEP_SUMMARY
          echo "| Cache Type | Status | Key |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | $DEPS_CACHE_STATUS | \`${{ steps.generate-cache-keys.outputs.pnpm-key }}\` |" >> $GITHUB_STEP_SUMMARY