name: 🔖 Prepare Release PR

on:
  workflow_dispatch:
  push:
    branches:
      - release/**

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  setup:
    name: 🧰 Setup
    if: needs.check-changesets.outputs.has_changesets == 'true'
    uses: ./.github/workflows/setup.yml
    with:
      cache-version: "v1"
      node-version: "22"
      pnpm-version: "10.6.4"
      sparse-checkout: false
    secrets:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

  lint:
    name: 🧹 Lint
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important: Need full history

      - name: 🧮 Calculate Nx Base and Head
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.6.4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Restore dependency cache
      - name: 📚 Restore dependency cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ needs.setup.outputs.pnpm-cache-key }}

      # Restore Nx cache
      - name: 💾 Restore Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ needs.setup.outputs.nx-cache-key }}

      # Run lint with the SHAs set by nx-set-shas
      - name: 🧹 Run linting
        run: |
          echo "🔍 Running lint on affected projects..."
          echo "Using base: $NX_BASE"
          echo "Using head: $NX_HEAD"

          pnpm nx affected --target=lint
          echo "✅ Lint completed successfully"

  test:
    name: 🧪 Test
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧮 Calculate Nx Base and Head
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.6.4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Restore dependency cache
      - name: 📚 Restore dependency cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ needs.setup.outputs.pnpm-cache-key }}

      # Restore Nx cache
      - name: 💾 Restore Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ needs.setup.outputs.nx-cache-key }}

      # Run tests with the SHAs set by nx-set-shas
      - name: 🧪 Run tests
        run: |
          echo "🔍 Running tests on affected projects..."
          echo "Using base: $NX_BASE"
          echo "Using head: $NX_HEAD"

          pnpm nx affected --target=test
          echo "✅ Tests completed successfully"

      - name: 📊 Test Summary
        if: always()
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi



  build:
    name: 🏗️ Build
    needs: [ setup, lint, test ]
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧮 Calculate Nx Base and Head
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.6.4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Restore dependency cache
      - name: 📚 Restore dependency cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ needs.setup.outputs.pnpm-cache-key }}

      # Restore Nx cache
      - name: 💾 Restore Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ needs.setup.outputs.nx-cache-key || format('{0}-node{1}-nx', 'v1', '22') }}
          restore-keys: |
            ${{ needs.setup.outputs.nx-cache-key || format('{0}-node{1}-nx', 'v1', '22') }}
            v1-node22-nx-

      # Run build with the SHAs set by nx-set-shas
      - name: 🏗️ Build affected projects
        run: |
          echo "🔍 Building affected projects..."
          echo "Using base: $NX_BASE"
          echo "Using head: $NX_HEAD"

          pnpm nx affected --target=build --parallel=3
          echo "✅ Build completed successfully"

      # Cache build artifacts for potential deployment jobs
      - name: 💾 Cache build artifacts
        uses: actions/cache@v4
        id: build-cache
        with:
          path: |
            dist
            */*/dist
            .next
            */*/build
          key: build-${{ github.sha }}

      # Updated to v4
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist
            */*/dist
          retention-days: 3

      - name: 📊 Build Summary
        run: |
          echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📦 Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Directory | Size |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY

          # Create a temp file for the artifact list
          ARTIFACTS_FILE=$(mktemp)

          # Find all dist directories and append to the file
          find . -type d -name "dist" | while read dir; do
            SIZE=$(du -sh "$dir" | cut -f1)
            echo "| \`$dir\` | $SIZE |" >> $ARTIFACTS_FILE
          done

          # Append the artifact list to the step summary
          cat $ARTIFACTS_FILE >> $GITHUB_STEP_SUMMARY

          # Remove the temp file
          rm $ARTIFACTS_FILE

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts are available for download from this workflow run." >> $GITHUB_STEP_SUMMARY
  
  

  version:
    name: 🧪 Run Changeset Versioning
    runs-on: ubuntu-latest
    needs: [setup]
    if: needs.setup.outputs.has_changesets == 'true' || needs.setup.outputs.has_changesets == true
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: 📦 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 10.6.4

      # Restore dependency cache
      - name: 📚 Restore dependency cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ needs.setup.outputs.pnpm-cache-key }}

      # Restore Nx cache
      - name: 💾 Restore Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ needs.setup.outputs.nx-cache-key }}

      - name: 🧮 Calculate Nx Base and Head
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: 🛠️ Run changeset version
        run: pnpm changeset version

      - name: 📤 Commit and push version bump
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(release): version bump"
          branch: main
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          push_options: --force


  draft-pre-release:
    name: 🚀 Create Pre-release Draft
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Needed to create releases

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Determine version from branch name
        id: get-version
        run: |
          # Assumes branch name is release/x.y.z (e.g., release/1.2.3-beta.1)
          branch_name="${{ github.base_ref }}"
          version="${branch_name#release/}"
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: 📝 Create GitHub Release (draft + prerelease)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.get-version.outputs.version }}"
          name: "v${{ steps.get-version.outputs.version }}"
          draft: true
          prerelease: true
          body: |
            This is a draft pre-release generated for PR #${{ github.event.pull_request.number }}.
            Once this PR is merged, a full release can be published.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
