name: 🧹 Lint

on:
  workflow_call:
    inputs:
      pnpm-cache-key:
        description: "The generated pnpm cache key"
        required: true
        type: string
      node-version:
        description: "Node.js version"
        required: false
        default: "22"
        type: string
      pnpm-version:
        description: "pnpm version"
        required: false
        default: "10.6.4"
        type: string
    secrets:
      NX_CLOUD_ACCESS_TOKEN:
        description: "Nx Cloud access token"
        required: true

jobs:
  lint:
    name: 🧹 Lint
    runs-on: ubuntu-latest
    env:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧮 Calculate Nx Base and Head
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ inputs.pnpm-version }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'pnpm'

      - name: 📚 Restore dependency cache
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ inputs.pnpm-cache-key }}

      - name: 📥 Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          echo "🔄 Cache miss - Installing dependencies..."
          pnpm install --frozen-lockfile
          echo "✅ Dependencies installed successfully"   

      # Run lint with the SHAs set by nx-set-shas
      - name: 🧹 Run linting
        id: run-lint
        run: |
          echo "🔍 Running lint on affected projects..."
          echo "Using base: $NX_BASE"
          echo "Using head: $NX_HEAD"

          pnpm nx affected --target=lint --head=${{ env.NX_HEAD }} --base=${{ env.NX_BASE }} --parallel=3 --output-style=stream > lint_output.txt
          lint_exit_code=$?
          echo "✅ Lint completed with exit code: $lint_exit_code"
          echo "lint_exit_code=$lint_exit_code" >> $GITHUB_OUTPUT

      - name: 📊 Generate Lint Summary
        id: lint-summary
        run: |
          echo "## 🧹 Lint Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.run-lint.outputs.lint_exit_code }}" == "0" ]; then
            echo "✅ Lint passed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Lint failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Lint Output" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat lint_output.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🚨 Check Lint Status
        if: steps.run-lint.outputs.lint_exit_code != 0
        run: exit 1