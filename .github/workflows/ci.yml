name: 🚀 CI Pipeline

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, staging, develop]

permissions:
  contents: write
  pull-requests: write

jobs:
  determine-affected:
    name: 🧮 Determine Affected Projects
    runs-on: ubuntu-latest
    outputs:
      run-affected: ${{ steps.set-affected.outputs.affected }}
      environment: ${{ steps.set-env.outputs.environment }}
    env:
      CI: true
      NX_TASKS_RUNNER: ${{ vars.NX_TASKS_RUNNER || 'local' }}
      NX_DISABLE_REMOTE_CACHE: ${{ vars.NX_DISABLE_REMOTE_CACHE || true }}
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v4

      - name: 🌱 Determine Environment
        id: set-env
        run: |
          BRANCH="${GITHUB_REF##*/}"
          echo "Detected branch: $BRANCH"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          if [[ "$BRANCH" == "main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == "staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == "develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
          else
            echo "::error::Unsupported branch for environment resolution."
            exit 1
          fi

      - name: 🔍 Determine Affected Usage
        id: set-affected
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [[ "$BRANCH" == "main" || "$BRANCH" == "staging" ]]; then
            echo "affected=false" >> $GITHUB_OUTPUT
          else
            echo "affected=true" >> $GITHUB_OUTPUT
          fi

  lint:
    name: 🧪 Run Linting
    needs: determine-affected
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-affected.outputs.environment }}
    env:
      CI: true
      GH_PAT: ${{ secrets.GH_PAT }}
      NX_TASKS_RUNNER: ${{ vars.NX_TASKS_RUNNER || 'local' }}
      NX_DISABLE_REMOTE_CACHE: ${{ vars.NX_DISABLE_REMOTE_CACHE || true }}
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-repo
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/setup-nx
        with:
          run-affected: ${{ needs.determine-affected.outputs.run-affected }}
      - name: 🧹 Lint
        uses: ./.github/actions/lint
        with:
          run-affected: ${{ needs.determine-affected.outputs.run-affected }}

  test:
    name: 🧪 Run Unit Tests
    needs: determine-affected
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-affected.outputs.environment }}
    env:
      CI: true
      GH_PAT: ${{ secrets.GH_PAT }}
      NX_TASKS_RUNNER: ${{ vars.NX_TASKS_RUNNER || 'local' }}
      NX_DISABLE_REMOTE_CACHE: ${{ vars.NX_DISABLE_REMOTE_CACHE || true }}
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-repo
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/setup-nx
        with:
          run-affected: ${{ needs.determine-affected.outputs.run-affected }}
      - name: 🧪 Test
        uses: ./.github/actions/test
        with:
          run-affected: ${{ needs.determine-affected.outputs.run-affected }}

  build:
    name: 🏗️ Build Packages
    needs: determine-affected
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-affected.outputs.environment }}
    env:
      CI: true
      GH_PAT: ${{ secrets.GH_PAT }}
      NX_TASKS_RUNNER: ${{ vars.NX_TASKS_RUNNER || 'local' }}
      NX_DISABLE_REMOTE_CACHE: ${{ vars.NX_DISABLE_REMOTE_CACHE || true }}
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-repo
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/setup-nx
        with:
          run-affected: ${{ needs.determine-affected.outputs.run-affected }}
      - name: 🏗️ Build
        uses: ./.github/actions/build
        with:
          run-affected: ${{ needs.determine-affected.outputs.run-affected }}

  changeset:
    name: 📦️ Changeset
    needs: [ lint, test, build ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    env:
      CI: true
      GH_PAT: ${{ secrets.GH_PAT }}
      NX_TASKS_RUNNER: ${{ vars.NX_TASKS_RUNNER || 'local' }}
      NX_DISABLE_REMOTE_CACHE: ${{ vars.NX_DISABLE_REMOTE_CACHE || true }}
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-repo
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/setup-nx
        with:
          run-affected: false
      - name: Create Release Pull Request or Publish to npm
        uses: changesets/action@v1
        with:
          publish: pnpm changeset publish
          version: pnpm changeset version
          commit: "chore(release): version packages"
          title: "chore(release): version packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  upload-release-artifacts:
    name: 🪄 Upload Release Artifacts
    needs: [ changeset, build ]
    if: needs.changeset.outputs.published == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist

      - name: 📥 Download BOM Artifacts
        uses: actions/download-artifact@v4
        with:
          name: bom
          path: bom

      - name: 🔍 Determine Tag Name
        id: release-meta
        shell: bash
        run: |
          TAG_NAME=$(git describe --tags --abbrev=0)
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: 📤 Upload Files to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-meta.outputs.tag }}
          files: |
            bom/bom.md
            bom/bom.json
          body_path: bom/bom.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Log Published Packages (optional)
        run: |
          echo '${{ needs.changeset.outputs.publishedPackages }}' | jq .
  
