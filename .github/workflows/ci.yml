name: Lint, Test, and Build

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]
  workflow_dispatch:
    inputs:
      target:
        description: 'Branch to validate'
        required: false
        default: 'development'

jobs:
  lint:
    name: üßπ Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: pnpm/action-setup@v2
        with:
          version: 10.6.4

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: ‚ôªÔ∏è Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - run: pnpm install

      - name: üß† Determine affected base
        id: base
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BASE_REF=${{ github.event.pull_request.base.sha }}" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "BASE_REF=origin/main" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref_name }}" == "development" ]]; then
            echo "BASE_REF=origin/development" >> "$GITHUB_OUTPUT"
          else
            echo "BASE_REF=HEAD~1" >> "$GITHUB_OUTPUT"
          fi

      - run: pnpm nx affected -t lint --base=${{ steps.base.outputs.BASE_REF }} --head=HEAD

  test:
    name: üß™ Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18, 20, 22]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: pnpm/action-setup@v2
        with:
          version: 10.6.4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: ‚ôªÔ∏è Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - run: pnpm install

      - name: üß† Determine affected base
        id: base
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BASE_REF=${{ github.event.pull_request.base.sha }}" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "BASE_REF=origin/main" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref_name }}" == "development" ]]; then
            echo "BASE_REF=origin/development" >> "$GITHUB_OUTPUT"
          else
            echo "BASE_REF=HEAD~1" >> "$GITHUB_OUTPUT"
          fi

      - run: pnpm nx run-many -t test --base=${{ steps.base.outputs.BASE_REF }} --head=HEAD

      - name: Upload per-package coverage to Codecov
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov

          for file in $(find ./packages -type f -name 'lcov.info' -path '*/coverage/lcov.info'); do
            pkg=$(echo $file | sed -E 's|.*/packages/([^/]+)/coverage/lcov.info|\1|')
            echo "Uploading coverage for $pkg"
            ./codecov --file "$file" --flag "$pkg" --name "$pkg" --token "${{ secrets.CODECOV_TOKEN }}"
          done
      

      - name: Merge all coverage
        run: |
          mkdir -p coverage
          find . -type f -name 'lcov.info' -path '*/coverage/lcov.info' -exec cat {} + > ./coverage/lcov.info

      - name: Upload combined coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: total
          name: total
          fail_ci_if_error: true

  build:
    name: üõ†Ô∏è Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: pnpm/action-setup@v2
        with:
          version: 10.6.4

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: ‚ôªÔ∏è Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - run: pnpm install

      - name: üß† Determine affected base
        id: base
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BASE_REF=${{ github.event.pull_request.base.sha }}" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "BASE_REF=origin/main" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref_name }}" == "development" ]]; then
            echo "BASE_REF=origin/development" >> "$GITHUB_OUTPUT"
          else
            echo "BASE_REF=HEAD~1" >> "$GITHUB_OUTPUT"
          fi

      - run: pnpm nx affected -t build --base=${{ steps.base.outputs.BASE_REF }} --head=HEAD

  validate:
    name: Validate All
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    steps:
      - name: Fail if any job failed
        if: always()
        run: |
          if [[ "${{ needs.lint.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå One or more jobs failed"
            exit 1
          fi
          echo "‚úÖ All validation jobs passed"
