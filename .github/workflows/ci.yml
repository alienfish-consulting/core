name: 🚀 CI Pipeline

on:
  push:
    branches: [main, development, release/*]
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      cache-version:
        description: "Cache version"
        required: false
        type: string
        default: "v1"
      node-version:
        description: "Node.js version"
        required: false
        type: string
        default: "22"
      pnpm-version:
        description: "pnpm version"
        required: false
        type: string
        default: "10.6.4"

jobs:
  setup:
    name: 🧰 Setup
    uses: ./.github/workflows/lib/setup.yml
    with:
      cache-version: ${{ inputs.cache-version || 'v1' }}
      node-version: ${{ inputs.node-version || '22' }}
      pnpm-version: ${{ inputs.pnpm-version || '10.6.4' }}
      sparse-checkout: false
    secrets:
      GH_TOKEN: ${{ secrets.GH_PAT }}


  lint:
    name: 🧹 Lint
    needs: setup
    uses: ./.github/workflows/lib/lint.yml
    with:
      node-version: ${{ inputs.node-version || '22' }}
      pnpm-version: ${{ inputs.pnpm-version || '10.6.4' }}
      pnpm-cache-key: ${{ needs.setup.outputs.pnpm-cache-key }}
    secrets:
      inherit

  test:
    name: 🧪 Test
    needs: setup
    uses: ./.github/workflows/lib/test.yml
    with:
      node-version: ${{ inputs.node-version || '22' }}
      pnpm-version: ${{ inputs.pnpm-version || '10.6.4' }}
      pnpm-cache-key: ${{ needs.setup.outputs.pnpm-cache-key }}
      run-affected: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || false }}
      upload-coverage: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || false }}
    secrets:
      inherit

  build:
    name: 🏗️ Build
    needs: [setup]
    uses: ./.github/workflows/lib/build.yml
    with:
      node-version: ${{ inputs.node-version || '22' }}
      pnpm-version: ${{ inputs.pnpm-version || '10.6.4' }}
      pnpm-cache-key: ${{ needs.setup.outputs.pnpm-cache-key }}
    secrets: inherit

  release:
    name: 📦 Release
    needs: [lint, test, build]
    # Only run on pushes to main that come from merging a release/* branch
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract release version
        id: extract-version
        run: |
          PR_BODY=$(git log -1 --pretty=%B)
          RELEASE_BRANCH=$(echo "$PR_BODY" | grep -o 'from release/[^ ]*' | sed 's/from release\///')
          if [[ -z "$RELEASE_BRANCH" ]]; then
            echo "No release branch found. Skipping release."
            exit 1
          fi
          echo "RELEASE_VERSION=${RELEASE_BRANCH}" >> $GITHUB_ENV
          echo "release_version=${RELEASE_BRANCH}" >> $GITHUB_OUTPUT

      - name: Check for GitHub Release
        id: check-release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{owner}/{repo}/releases/tags/v${{ steps.extract-version.outputs.release_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAM }}
        continue-on-error: true

      - name: Setup Node.js
        if: steps.check-release.outcome == 'failure'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version || '22' }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        if: steps.check-release.outcome == 'failure'
        uses: pnpm/action-setup@v2
        with:
          version: ${{ inputs.pnpm-version || '10.6.4' }}

      - name: Configure Git
        if: steps.check-release.outcome == 'failure'
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Install dependencies
        if: steps.check-release.outcome == 'failure'
        run: pnpm install --frozen-lockfile

      - name: Create and publish release
        if: steps.check-release.outcome == 'failure'
        run: |
          pnpm changeset version
          
          # Create a detailed commit message
          git add .
          git commit -m "chore(release): publish v${{ steps.extract-version.outputs.release_version }} [skip ci]" \
                   -m "This release includes all changes from release/${{ steps.extract-version.outputs.release_version }}" \
                   -m "Generated by the CI release automation."
          
          # Publish to npm
          pnpm changeset publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Create GitHub Release
        if: steps.check-release.outcome == 'failure'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.extract-version.outputs.release_version }}
          name: Release v${{ steps.extract-version.outputs.release_version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}